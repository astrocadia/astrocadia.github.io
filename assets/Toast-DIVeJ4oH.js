import{j as e}from"./jsx-runtime-4WDyTGeM.js";import{c as l}from"./index-eOQoo3sK.js";import{r as u}from"./index-Dl6G-zuu.js";import{S as d}from"./Snackbar-yxcL1JMF.js";import{z as c,N as p,g as m,I as f,a4 as h,x as y}from"./WarningIcon-DZ-0i3Yx.js";import"./EditIcon-C_DteFoa.js";import"./LinkIcon-8pN4OFct.js";import"./SvgIcon-eIfT25mh.js";const b={copy:c,error:p,error_connection:m,info:f,loading:h,success:y,plain:void 0},i=({className:t,type:n,anchorOrigin:r={vertical:"bottom",horizontal:"center"},message:o,...s})=>{const a=u.useMemo(()=>b[n],[n]);return e.jsx(d,{className:l("Toast",t,`Toast__type__${n}`,{Toast__hasIcon:!!a}),message:o,anchorOrigin:r,...s,children:e.jsxs("div",{className:"Toast__content",children:[a&&e.jsx("div",{className:"Toast__icon",children:e.jsx(a,{})}),e.jsx("div",{className:"Toast__message",children:o})]})})};try{i.displayName="Toast",i.__docgenInfo={description:"",displayName:"Toast",props:{type:{defaultValue:null,description:"",name:"type",required:!0,type:{name:"enum",value:[{value:'"loading"'},{value:'"copy"'},{value:'"success"'},{value:'"info"'},{value:'"error"'},{value:'"error_connection"'},{value:'"plain"'}]}},action:{defaultValue:null,description:"The action to display. It renders after the message, at the end of the snackbar.",name:"action",required:!1,type:{name:"ReactNode"}},anchorOrigin:{defaultValue:{value:"{ vertical: 'bottom', horizontal: 'center' }"},description:"The anchor of the `Snackbar`.\nOn smaller screens, the component grows to occupy all the available width,\nthe horizontal alignment is ignored.",name:"anchorOrigin",required:!1,type:{name:"SnackbarOrigin"}},autoHideDuration:{defaultValue:{value:"null"},description:"The number of milliseconds to wait before automatically calling the\n`onClose` function. `onClose` should then set the state of the `open`\nprop to hide the Snackbar. This behavior is disabled by default with\nthe `null` value.",name:"autoHideDuration",required:!1,type:{name:"number | null"}},children:{defaultValue:null,description:"Replace the `SnackbarContent` component.",name:"children",required:!1,type:{name:"ReactElement<any, any>"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<SnackbarClasses>"}},ClickAwayListenerProps:{defaultValue:null,description:"Props applied to the `ClickAwayListener` element.",name:"ClickAwayListenerProps",required:!1,type:{name:"Partial<ClickAwayListenerProps>"}},ContentProps:{defaultValue:null,description:"Props applied to the [`SnackbarContent`](/material-ui/api/snackbar-content/) element.",name:"ContentProps",required:!1,type:{name:"Partial<SnackbarContentProps>"}},disableWindowBlurListener:{defaultValue:{value:"false"},description:"If `true`, the `autoHideDuration` timer will expire even if the window is not focused.",name:"disableWindowBlurListener",required:!1,type:{name:"boolean"}},key:{defaultValue:null,description:"When displaying multiple consecutive snackbars using a single parent-rendered\n`<Snackbar/>`, add the `key` prop to ensure independent treatment of each message.\nFor instance, use `<Snackbar key={message} />`. Otherwise, messages might update\nin place, and features like `autoHideDuration` could be affected.",name:"key",required:!1,type:{name:"any"}},message:{defaultValue:null,description:"The message to display.",name:"message",required:!1,type:{name:"ReactNode"}},onClose:{defaultValue:null,description:'Callback fired when the component requests to be closed.\nTypically `onClose` is used to set state in the parent component,\nwhich is used to control the `Snackbar` `open` prop.\nThe `reason` parameter can optionally be used to control the response to `onClose`,\nfor example ignoring `clickaway`.\n@param event The event source of the callback.\n@param reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`, or `"escapeKeyDown"`.',name:"onClose",required:!1,type:{name:"((event: Event | SyntheticEvent<any, Event>, reason: SnackbarCloseReason) => void)"}},open:{defaultValue:null,description:"If `true`, the component is shown.",name:"open",required:!1,type:{name:"boolean"}},resumeHideDuration:{defaultValue:null,description:"The number of milliseconds to wait before dismissing after user interaction.\nIf `autoHideDuration` prop isn't specified, it does nothing.\nIf `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\nwe default to `autoHideDuration / 2` ms.",name:"resumeHideDuration",required:!1,type:{name:"number"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},TransitionComponent:{defaultValue:{value:"Grow"},description:`The component used for the transition.
[Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.`,name:"TransitionComponent",required:!1,type:{name:"JSXElementConstructor<TransitionProps & { children: ReactElement<any, any>; }>"}},transitionDuration:{defaultValue:{value:`{
enter: theme.transitions.duration.enteringScreen,
exit: theme.transitions.duration.leavingScreen,
}`},description:`The duration for the transition, in milliseconds.
You may specify a single timeout for all transitions, or individually with an object.`,name:"transitionDuration",required:!1,type:{name:"number | { appear?: number; enter?: number; exit?: number | undefined; } | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined; } | undefined"}},TransitionProps:{defaultValue:{value:"{}"},description:"Props applied to the transition element.\nBy default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.",name:"TransitionProps",required:!1,type:{name:"TransitionProps"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}}}}}catch{}export{i as T};
