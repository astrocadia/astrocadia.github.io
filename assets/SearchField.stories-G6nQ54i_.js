import{j as e}from"./jsx-runtime-4WDyTGeM.js";import{r as V}from"./index-Dl6G-zuu.js";import{T as I}from"./ThemeProviderWrapper-uQhE3vfQ.js";import{c as C}from"./index-eOQoo3sK.js";import"./ControlledTextField-DVeGBoB-.js";import{T as w}from"./TextField-W3uF_ooE.js";import{e as P,h as S}from"./WarningIcon-hyuTG_uV.js";import"./EditIcon-DQffeilE.js";import"./LinkIcon-CTu8-jnD.js";import"./SvgIcon-DKK2_66P.js";import{I as d}from"./InputAdornment-BINYG23M.js";import{I as F}from"./InputAdornmentButton-Cnrcw6Ye.js";import"./FormControl-CbyZrMCZ.js";import"./FormControl-BW8ARzgi.js";import"./styled-DaAyEikA.js";import"./utils-DoM3o7-Q.js";import"./useFormControl-f2Zb6bR-.js";import"./isMuiElement-DAcuSkv2.js";import"./FormHelperText-BIk9X5ta.js";import"./FormHelperText-h5eDLKOl.js";import"./formControlState-Dq1zat_P.js";import"./Input-BHnaju5M.js";import"./createSvgIcon-3kI-rNei.js";import"./createSvgIcon-DWxpDd4T.js";import"./SvgIcon-d6V0mnb4.js";import"./useForkRef-BDoLG09A.js";import"./createChainedFunction-BO_9K8Jh.js";import"./ownerWindow-BN2rbQ_G.js";import"./ownerDocument-DW-IO8s5.js";import"./useTimeout-B4b6mSVs.js";import"./useId-BkqTTtmk.js";import"./useControlled-1Y2rT-1r.js";import"./useIsFocusVisible-NzCoqL_q.js";import"./InputLabel-B2X2Mqqg.js";import"./InputLabel-B0NhuLFQ.js";import"./FormLabel-Ca9udkQO.js";import"./Select-BchA4hd0.js";import"./react-is.production.min-DUDD-a5e.js";import"./Menu-CnssX2u1.js";import"./Popover-B7dHjqFW.js";import"./Modal-_7pSkSOU.js";import"./Fade-Baf6ytQl.js";import"./useTheme-CYpYpbD_.js";import"./utils-Dh94M0rq.js";import"./TransitionGroupContext-xAci1nHd.js";import"./index-CmOK7BR8.js";import"./getScrollbarSize-Bqq2hMjQ.js";import"./mergeSlotProps-Dc5z_XIy.js";import"./isHostComponent-DVu5iVWx.js";import"./useSlotProps-DeMrnH46.js";import"./Portal-3LY7w8wx.js";import"./Paper-B6pP1Hjl.js";import"./Grow-CF8DuDB2.js";import"./MenuList-CUm--JsH.js";import"./List-B5csL-18.js";import"./ListContext-BMbj8Y86.js";import"./Typography-n3eyoqZV.js";import"./IconButton-CI5pklQo.js";import"./IconButton-BRjw76_K.js";import"./ButtonBase-gXIT4mbS.js";import"./Tooltip-CSQNJ7MT.js";const u=({className:n,value:t,onClear:a,fullWidth:r=!0,...l})=>{const p=V.useMemo(()=>{if(!(!(t!=null&&t.length)||!a))return e.jsx(d,{position:"end",children:e.jsx(F,{onClick:a,children:e.jsx(P,{})})})},[a,t]);return e.jsx(w,{className:C("SearchField",n),InputProps:{startAdornment:e.jsx(d,{position:"start",children:e.jsx(S,{})}),endAdornment:p},value:t,fullWidth:r,...l})};try{u.displayName="SearchField",u.__docgenInfo={description:"A search field component that includes a search icon and a clear button.",displayName:"SearchField",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string"}},onClear:{defaultValue:null,description:"",name:"onClear",required:!1,type:{name:"(() => void)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<TextFieldClasses>"}},children:{defaultValue:null,description:`The content of the component.
@ignore`,name:"children",required:!1,type:{name:"ReactNode"}},label:{defaultValue:null,description:"The label content.",name:"label",required:!1,type:{name:"ReactNode"}},defaultValue:{defaultValue:null,description:"The default value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"unknown"}},autoFocus:{defaultValue:{value:"false"},description:"If `true`, the `input` element is focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The id of the `input` element.\nUse this prop to make `label` and `helperText` accessible for screen readers.",name:"id",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onChange:{defaultValue:null,description:"Callback fired when the value is changed.\n@param event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).\n@param event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).\n@param event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},disabled:{defaultValue:{value:"false"},description:"If `true`, the component is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"Name attribute of the `input` element.",name:"name",required:!1,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",name:"type",required:!1,type:{name:"HTMLInputTypeAttribute"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"Ref<any>"}},required:{defaultValue:{value:"false"},description:"If `true`, the label is displayed as required and the `input` element is required.",name:"required",required:!1,type:{name:"boolean"}},error:{defaultValue:{value:"false"},description:"If `true`, the label is displayed in an error state.",name:"error",required:!1,type:{name:"boolean"}},orientation:{defaultValue:null,description:"",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},autoComplete:{defaultValue:null,description:`This prop helps users to fill forms faster, especially on mobile devices.
The name can be confusing, as it's more like an autofill.
You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).`,name:"autoComplete",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the `input` before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},rows:{defaultValue:null,description:"Number of rows to display when multiline option is set to true.",name:"rows",required:!1,type:{name:"string | number"}},FormHelperTextProps:{defaultValue:null,description:"",name:"FormHelperTextProps",required:!1,type:{name:"FormHelperTextProps"}},InputLabelProps:{defaultValue:null,description:"",name:"InputLabelProps",required:!1,type:{name:"InputLabelProps"}},InputProps:{defaultValue:null,description:"",name:"InputProps",required:!1,type:{name:"InputProps"}},SelectProps:{defaultValue:null,description:"",name:"SelectProps",required:!1,type:{name:"SelectProps"}},fullWidth:{defaultValue:{value:"true"},description:"If `true`, the input will take up the full width of its container.",name:"fullWidth",required:!1,type:{name:"boolean"}},focused:{defaultValue:null,description:"If `true`, the component is displayed in focused state.",name:"focused",required:!1,type:{name:"boolean"}},hiddenLabel:{defaultValue:{value:"false"},description:"If `true`, the label is hidden.\nThis is used to increase density for a `FilledInput`.\nBe sure to add `aria-label` to the `input` element.",name:"hiddenLabel",required:!1,type:{name:"boolean"}},helperText:{defaultValue:null,description:"The helper text content.",name:"helperText",required:!1,type:{name:"ReactNode"}},multiline:{defaultValue:{value:"false"},description:"If `true`, a `textarea` element is rendered instead of an input.",name:"multiline",required:!1,type:{name:"boolean"}},maxRows:{defaultValue:null,description:"Maximum number of rows to display when multiline option is set to true.",name:"maxRows",required:!1,type:{name:"string | number"}},minRows:{defaultValue:null,description:"Minimum number of rows to display when multiline option is set to true.",name:"minRows",required:!1,type:{name:"string | number"}}}}}catch{}const Ae={title:"Design System/Composite Components/SearchField",component:u,tags:["autodocs"],args:{placeholder:"Search",onClear:()=>console.log("Reset")},decorators:[n=>e.jsx(I,{children:e.jsx(n,{})})],render:({value:n,onClear:t,...a})=>{const[r,l]=V.useState(""),p=t?()=>{l(""),t()}:void 0,q=x=>{l(x.target.value)};return e.jsxs("div",{style:{display:"grid",gridTemplateColumns:"minmax(300px, 50%)",gap:"0.5rem",marginTop:"1rem"},children:[e.jsx(u,{...a,onChange:q,onClear:p,value:r}),e.jsxs("div",{className:"body-1",children:["Value: ",r]})]})},parameters:{design:{type:"figma",url:"https://www.figma.com/design/WXkouxbpbj3I6bP5bBDvJk/GB2-Design-System?node-id=5225-11860&m=dev"},docs:{description:{component:"An uncontrolled search field component that includes a search icon and a clear button."}}}},o={},i={args:{disabled:!0}},s={name:"No Clear Button (onClear = undefined)",args:{onClear:void 0},parameters:{docs:{description:{story:"By leaving the `onClear` prop undefined, the reset button will not be rendered."}}}};var m,c,f;o.parameters={...o.parameters,docs:{...(m=o.parameters)==null?void 0:m.docs,source:{originalSource:"{}",...(f=(c=o.parameters)==null?void 0:c.docs)==null?void 0:f.source}}};var h,y,b;i.parameters={...i.parameters,docs:{...(h=i.parameters)==null?void 0:h.docs,source:{originalSource:`{
  args: {
    disabled: true
  }
}`,...(b=(y=i.parameters)==null?void 0:y.docs)==null?void 0:b.source}}};var g,v,T;s.parameters={...s.parameters,docs:{...(g=s.parameters)==null?void 0:g.docs,source:{originalSource:`{
  name: 'No Clear Button (onClear = undefined)',
  args: {
    onClear: undefined
  },
  parameters: {
    docs: {
      description: {
        story: 'By leaving the \`onClear\` prop undefined, the reset button will not be rendered.'
      }
    }
  }
}`,...(T=(v=s.parameters)==null?void 0:v.docs)==null?void 0:T.source}}};const Re=["Default","Disabled","NoOnClear"];export{o as Default,i as Disabled,s as NoOnClear,Re as __namedExportsOrder,Ae as default};
