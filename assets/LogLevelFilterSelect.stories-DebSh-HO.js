import{j as e}from"./jsx-runtime-4WDyTGeM.js";import{r as d}from"./index-Dl6G-zuu.js";import{T as f}from"./ThemeProviderWrapper-uQhE3vfQ.js";import{c}from"./index-eOQoo3sK.js";import{S as h}from"./SelectWithActions-CkMBzI96.js";import"./Badge-B5h4WNES.js";import"./CountBadge-3ANCZLmo.js";import{E as y,W as b,I as v,D as V}from"./WarningIconBadge-DYC2RgsF.js";import"./MenuItem-D9qYothb.js";import"./ListItemIcon-CTz5rc-7.js";import"./styled-DaAyEikA.js";import"./ListContext-BMbj8Y86.js";import"./MenuItem-2XNxwLO8.js";import"./ButtonBase-gXIT4mbS.js";import"./useTimeout-B4b6mSVs.js";import"./TransitionGroupContext-xAci1nHd.js";import"./useForkRef-BDoLG09A.js";import"./useIsFocusVisible-NzCoqL_q.js";import"./dividerClasses-UQEstWVR.js";import"./listItemTextClasses-CyVyitQV.js";import"./Checkbox-SjERWzSA.js";import"./WarningIcon-hyuTG_uV.js";import"./SvgIcon-DKK2_66P.js";import"./SvgIcon-d6V0mnb4.js";import"./EditIcon-DQffeilE.js";import"./LinkIcon-CTu8-jnD.js";import"./SwitchBase-bjyHYJtY.js";import"./useFormControl-f2Zb6bR-.js";import"./useControlled-1Y2rT-1r.js";import"./createSvgIcon-DWxpDd4T.js";import"./ControlledTextField-DVeGBoB-.js";import"./TextField-W3uF_ooE.js";import"./FormControl-CbyZrMCZ.js";import"./FormControl-BW8ARzgi.js";import"./utils-DoM3o7-Q.js";import"./isMuiElement-DAcuSkv2.js";import"./FormHelperText-BIk9X5ta.js";import"./FormHelperText-h5eDLKOl.js";import"./formControlState-Dq1zat_P.js";import"./Input-BHnaju5M.js";import"./createSvgIcon-3kI-rNei.js";import"./createChainedFunction-BO_9K8Jh.js";import"./ownerWindow-BN2rbQ_G.js";import"./ownerDocument-DW-IO8s5.js";import"./useId-BkqTTtmk.js";import"./InputAdornment-BINYG23M.js";import"./isHostComponent-DVu5iVWx.js";import"./Typography-n3eyoqZV.js";import"./InputLabel-B2X2Mqqg.js";import"./InputLabel-B0NhuLFQ.js";import"./FormLabel-Ca9udkQO.js";import"./Select-BchA4hd0.js";import"./react-is.production.min-DUDD-a5e.js";import"./Menu-CnssX2u1.js";import"./Popover-B7dHjqFW.js";import"./Modal-_7pSkSOU.js";import"./Fade-Baf6ytQl.js";import"./useTheme-CYpYpbD_.js";import"./utils-Dh94M0rq.js";import"./index-CmOK7BR8.js";import"./getScrollbarSize-Bqq2hMjQ.js";import"./mergeSlotProps-Dc5z_XIy.js";import"./useSlotProps-DeMrnH46.js";import"./Portal-3LY7w8wx.js";import"./Paper-B6pP1Hjl.js";import"./Grow-CF8DuDB2.js";import"./MenuList-CUm--JsH.js";import"./List-B5csL-18.js";import"./index-DXf7EplP.js";import"./ListItemText-CDFTHr1G.js";import"./MenuButton-BH2a1E_k.js";import"./Button-BoimfWT1.js";import"./Button-BYmqNiby.js";const l=t=>`Retention: ${t}`,q=[{label:"Error",caption:l("User-managed"),value:"error",icon:e.jsx(y,{})},{label:"Warning",caption:l("1 week"),value:"warn",icon:e.jsx(b,{})},{label:"Info",caption:l("72 hours"),value:"info",icon:e.jsx(v,{})},{label:"Debug",caption:l("48 hours"),value:"debug",icon:e.jsx(V,{})}],r=({className:t,label:i="Event Type",onChange:a,...o})=>e.jsx(h,{className:c("LogLevelFilterSelect",t),label:i,menuClasses:"LogLevelFilterSelect__menu",options:q,showFilterIcon:!1,onChange:m=>a==null?void 0:a(m),...o});try{r.displayName="LogLevelFilterSelect",r.__docgenInfo={description:"A select for filtering log levels.",displayName:"LogLevelFilterSelect",props:{onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"((value: LogLevelFilterSelectValue) => void)"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<TextFieldClasses>"}},children:{defaultValue:null,description:`The content of the component.
@ignore`,name:"children",required:!1,type:{name:"ReactNode"}},label:{defaultValue:{value:"Event Type"},description:"The label for the input.",name:"label",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"The default value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"unknown"}},autoFocus:{defaultValue:{value:"false"},description:"If `true`, the `input` element is focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The id of the `input` element.\nUse this prop to make `label` and `helperText` accessible for screen readers.",name:"id",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},disabled:{defaultValue:{value:"false"},description:"If `true`, the component is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"Name attribute of the `input` element.",name:"name",required:!1,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",name:"type",required:!1,type:{name:"HTMLInputTypeAttribute"}},value:{defaultValue:null,description:"The value of the input.",name:"value",required:!1,type:{name:"SelectWithActionsValue"}},actions:{defaultValue:null,description:"The actions to be displayed in the menu.",name:"actions",required:!1,type:{name:"ReactNode"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"Ref<any>"}},required:{defaultValue:{value:"false"},description:"If `true`, the label is displayed as required and the `input` element is required.",name:"required",required:!1,type:{name:"boolean"}},error:{defaultValue:{value:"false"},description:"If `true`, the label is displayed in an error state.",name:"error",required:!1,type:{name:"boolean"}},orientation:{defaultValue:null,description:"",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},autoComplete:{defaultValue:null,description:`This prop helps users to fill forms faster, especially on mobile devices.
The name can be confusing, as it's more like an autofill.
You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).`,name:"autoComplete",required:!1,type:{name:"string"}},multiple:{defaultValue:{value:"true"},description:"Determines if multiple options can be selected.",name:"multiple",required:!1,type:{name:"boolean"}},placeholder:{defaultValue:null,description:"The short hint displayed in the `input` before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},rows:{defaultValue:null,description:"Number of rows to display when multiline option is set to true.",name:"rows",required:!1,type:{name:"string | number"}},FormHelperTextProps:{defaultValue:null,description:"",name:"FormHelperTextProps",required:!1,type:{name:"FormHelperTextProps"}},InputLabelProps:{defaultValue:null,description:"",name:"InputLabelProps",required:!1,type:{name:"InputLabelProps"}},InputProps:{defaultValue:null,description:"",name:"InputProps",required:!1,type:{name:"InputProps"}},SelectProps:{defaultValue:null,description:"",name:"SelectProps",required:!1,type:{name:"SelectProps"}},fullWidth:{defaultValue:{value:"false"},description:"If `true`, the input will take up the full width of its container.",name:"fullWidth",required:!1,type:{name:"boolean"}},focused:{defaultValue:null,description:"If `true`, the component is displayed in focused state.",name:"focused",required:!1,type:{name:"boolean"}},hiddenLabel:{defaultValue:{value:"false"},description:"If `true`, the label is hidden.\nThis is used to increase density for a `FilledInput`.\nBe sure to add `aria-label` to the `input` element.",name:"hiddenLabel",required:!1,type:{name:"boolean"}},helperText:{defaultValue:null,description:"The helper text content.",name:"helperText",required:!1,type:{name:"ReactNode"}},multiline:{defaultValue:{value:"false"},description:"If `true`, a `textarea` element is rendered instead of an input.",name:"multiline",required:!1,type:{name:"boolean"}},maxRows:{defaultValue:null,description:"Maximum number of rows to display when multiline option is set to true.",name:"maxRows",required:!1,type:{name:"string | number"}},minRows:{defaultValue:null,description:"Minimum number of rows to display when multiline option is set to true.",name:"minRows",required:!1,type:{name:"string | number"}},checkmarks:{defaultValue:{value:"true"},description:"Determines if the menu items show check marks or not.",name:"checkmarks",required:!1,type:{name:"boolean"}},initialValue:{defaultValue:{value:"[]"},description:"The value that is reset to. If the sorted value does not equal this sorted value, the reset button is enabled.",name:"initialValue",required:!1,type:{name:"SelectWithActionsValue"}},menuClasses:{defaultValue:null,description:"Class to be appended to classNames of menu.",name:"menuClasses",required:!1,type:{name:"string"}},menuPosition:{defaultValue:{value:"'left'"},description:"The position of the menu relative to the select input.",name:"menuPosition",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},resetLabel:{defaultValue:{value:"'Reset'"},description:"The label for the reset button.",name:"resetLabel",required:!1,type:{name:"string"}},showFilterIcon:{defaultValue:{value:"true"},description:"Determines if the filter icon should be shown in the input.",name:"showFilterIcon",required:!1,type:{name:"boolean"}},showResetButton:{defaultValue:{value:"true"},description:"Determines if the reset button should be shown.",name:"showResetButton",required:!1,type:{name:"boolean"}},showSelectedCount:{defaultValue:{value:"true"},description:"Determines if the number of selected options should be shown.",name:"showSelectedCount",required:!1,type:{name:"boolean"}}}}}catch{}const je={title:"Design System/Composite Components/LogLevelFilterSelect",tags:["autodocs"],component:r,argTypes:{}},g=({...t})=>{const[i,a]=d.useState([]);return e.jsx(f,{children:e.jsx(r,{...t,value:i,onChange:o=>a(o)})})},n={render:g};var s,u,p;n.parameters={...n.parameters,docs:{...(s=n.parameters)==null?void 0:s.docs,source:{originalSource:`{
  render
}`,...(p=(u=n.parameters)==null?void 0:u.docs)==null?void 0:p.source}}};const Ae=["Default"];export{n as Default,Ae as __namedExportsOrder,je as default};
