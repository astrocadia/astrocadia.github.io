import{j as e}from"./jsx-runtime-4WDyTGeM.js";import{T as v}from"./ThemeProviderWrapper-uQhE3vfQ.js";import{C,W as V,i as I}from"./WarningIcon-hyuTG_uV.js";import"./EditIcon-DQffeilE.js";import"./LinkIcon-CTu8-jnD.js";import"./SvgIcon-DKK2_66P.js";import{r as T}from"./index-Dl6G-zuu.js";import{C as q}from"./ConfirmationDialog-z8clH5fB.js";import{B as R}from"./Button-BoimfWT1.js";import{u as x}from"./useToggle-B4o7u8Ia.js";import"./SvgIcon-d6V0mnb4.js";import"./styled-DaAyEikA.js";import"./index-eOQoo3sK.js";import"./DialogTitle-Dk4m-gqV.js";import"./useMobileMediaQuery-DuF0AuJt.js";import"./useMediaQuery-CDF-4tKz.js";import"./useTimeout-B4b6mSVs.js";import"./useTheme-CYpYpbD_.js";import"./Modal-_7pSkSOU.js";import"./Fade-Baf6ytQl.js";import"./utils-Dh94M0rq.js";import"./TransitionGroupContext-xAci1nHd.js";import"./index-CmOK7BR8.js";import"./useForkRef-BDoLG09A.js";import"./getScrollbarSize-Bqq2hMjQ.js";import"./ownerDocument-DW-IO8s5.js";import"./ownerWindow-BN2rbQ_G.js";import"./mergeSlotProps-Dc5z_XIy.js";import"./isHostComponent-DVu5iVWx.js";import"./createChainedFunction-BO_9K8Jh.js";import"./useSlotProps-DeMrnH46.js";import"./Portal-3LY7w8wx.js";import"./Paper-B6pP1Hjl.js";import"./useId-BkqTTtmk.js";import"./DialogActions-Dq_sZO6J.js";import"./createSvgIcon-3kI-rNei.js";import"./createSvgIcon-DWxpDd4T.js";import"./isMuiElement-DAcuSkv2.js";import"./useControlled-1Y2rT-1r.js";import"./useIsFocusVisible-NzCoqL_q.js";import"./IconButton-CI5pklQo.js";import"./IconButton-BRjw76_K.js";import"./ButtonBase-gXIT4mbS.js";import"./Tooltip-CSQNJ7MT.js";import"./Grow-CF8DuDB2.js";import"./Button-BYmqNiby.js";const i=({ConfirmationDialogProps:t={},dialogMessage:m,dialogTitle:f,onClick:l,...h})=>{const{toggled:y,setOff:a,setOn:g}=x(!1),b=T.useCallback(()=>{l(),a()},[l,a]);return e.jsxs(e.Fragment,{children:[e.jsx(R,{...h,onClick:g}),e.jsx(q,{...t,open:y,onClose:a,onCancel:a,onAccept:b,title:f,children:m})]})};try{i.displayName="ConfirmationButton",i.__docgenInfo={description:"",displayName:"ConfirmationButton",props:{ConfirmationDialogProps:{defaultValue:{value:"{}"},description:"",name:"ConfirmationDialogProps",required:!1,type:{name:'Partial<Omit<ConfirmationDialogProps, "children" | "title" | "onClose" | "open" | "onConfirm">>'}},dialogMessage:{defaultValue:null,description:"",name:"dialogMessage",required:!0,type:{name:"ReactNode"}},dialogTitle:{defaultValue:null,description:"",name:"dialogTitle",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!0,type:{name:"() => void"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"(Partial<ButtonClasses> & Partial<ClassNameMap<never>>)"}},children:{defaultValue:null,description:"The content of the component.",name:"children",required:!1,type:{name:"ReactNode"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},variant:{defaultValue:null,description:"",name:"variant",required:!1,type:{name:"enum",value:[{value:'"input"'},{value:'"primary"'},{value:'"secondary"'},{value:'"ghost"'},{value:'"flow"'}]}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"((instance: HTMLButtonElement | null) => void) | RefObject<HTMLButtonElement> | null"}},tabIndex:{defaultValue:{value:"0"},description:"",name:"tabIndex",required:!1,type:{name:"number"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},disabled:{defaultValue:{value:`false
false`},description:"If `true`, the component is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},action:{defaultValue:null,description:"A ref for imperative actions.\nIt currently only supports `focusVisible()` action.",name:"action",required:!1,type:{name:"Ref<ButtonBaseActions>"}},centerRipple:{defaultValue:{value:"false"},description:"If `true`, the ripples are centered.\nThey won't start at the cursor interaction position.",name:"centerRipple",required:!1,type:{name:"boolean"}},disableRipple:{defaultValue:{value:"false"},description:"If `true`, the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the `.Mui-focusVisible` class.",name:"disableRipple",required:!1,type:{name:"boolean"}},disableTouchRipple:{defaultValue:{value:"false"},description:"If `true`, the touch ripple effect is disabled.",name:"disableTouchRipple",required:!1,type:{name:"boolean"}},focusRipple:{defaultValue:{value:"false"},description:"If `true`, the base button will have a keyboard focus ripple.",name:"focusRipple",required:!1,type:{name:"boolean"}},focusVisibleClassName:{defaultValue:null,description:`This prop can help identify which element has keyboard focus.
The class name will be applied when the element gains the focus through keyboard interaction.
It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a \`focus-visible\` class to other components
if needed.`,name:"focusVisibleClassName",required:!1,type:{name:"string"}},LinkComponent:{defaultValue:{value:"'a'"},description:"The component used to render a link when the `href` prop is provided.",name:"LinkComponent",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},onFocusVisible:{defaultValue:null,description:"Callback fired when the component is focused with a keyboard.\nWe trigger a `onFocus` callback too.",name:"onFocusVisible",required:!1,type:{name:"FocusEventHandler<any>"}},TouchRippleProps:{defaultValue:null,description:"Props applied to the `TouchRipple` element.",name:"TouchRippleProps",required:!1,type:{name:"Partial<TouchRippleProps>"}},touchRippleRef:{defaultValue:null,description:"A ref that points to the `TouchRipple` element.",name:"touchRippleRef",required:!1,type:{name:"Ref<TouchRippleActions>"}},disableFocusRipple:{defaultValue:{value:"false"},description:"If `true`, the  keyboard focus ripple is disabled.",name:"disableFocusRipple",required:!1,type:{name:"boolean"}},size:{defaultValue:{value:"'medium'"},description:"The size of the component.\n`small` is equivalent to the dense button styling.",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},href:{defaultValue:null,description:"The URL to link to when the button is clicked.\nIf defined, an `a` element will be used as the root node.",name:"href",required:!1,type:{name:"string"}},fullWidth:{defaultValue:{value:"false"},description:"If `true`, the button will take up the full width of its container.",name:"fullWidth",required:!1,type:{name:"boolean"}},disableElevation:{defaultValue:{value:"false"},description:"If `true`, no elevation is used.",name:"disableElevation",required:!1,type:{name:"boolean"}},endIcon:{defaultValue:null,description:"Element placed after the children.",name:"endIcon",required:!1,type:{name:"ReactNode"}},startIcon:{defaultValue:null,description:"Element placed before the children.",name:"startIcon",required:!1,type:{name:"ReactNode"}}}}}catch{}const ve={title:"Design System/Components/ConfirmationButton",decorators:[t=>e.jsx(v,{children:e.jsx(t,{})})],tags:["autodocs"],component:i},n={args:{children:"Delete"}},o={args:{children:"Send Message",ConfirmationDialogProps:{AcceptButtonProps:{startIcon:e.jsx(C,{})},acceptText:"Send",CancelButtonProps:{startIcon:e.jsx(V,{})},cancelText:"Don't Send"},dialogTitle:"Send the message now?",dialogMessage:"Are you sure you want to send the message now?",startIcon:e.jsx(I,{}),variant:"secondary"}};var r,s,p;n.parameters={...n.parameters,docs:{...(r=n.parameters)==null?void 0:r.docs,source:{originalSource:`{
  args: {
    children: 'Delete'
  }
}`,...(p=(s=n.parameters)==null?void 0:s.docs)==null?void 0:p.source}}};var u,d,c;o.parameters={...o.parameters,docs:{...(u=o.parameters)==null?void 0:u.docs,source:{originalSource:`{
  args: {
    children: 'Send Message',
    ConfirmationDialogProps: {
      AcceptButtonProps: {
        startIcon: <CheckIcon />
      },
      acceptText: 'Send',
      CancelButtonProps: {
        startIcon: <WarningIcon />
      },
      cancelText: "Don't Send"
    },
    dialogTitle: 'Send the message now?',
    dialogMessage: 'Are you sure you want to send the message now?',
    startIcon: <SendIcon />,
    variant: 'secondary'
  }
}`,...(c=(d=o.parameters)==null?void 0:d.docs)==null?void 0:c.source}}};const Ce=["Default","Custom"];export{o as Custom,n as Default,Ce as __namedExportsOrder,ve as default};
