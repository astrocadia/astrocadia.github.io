import{j as u}from"./jsx-runtime-4WDyTGeM.js";import{c as v}from"./index-eOQoo3sK.js";import{I as m}from"./IconButton-DYHDsDKu.js";import{A as P,r as q,d as x}from"./WarningIcon-6HpPPylF.js";import"./EditIcon-bNkpr5Ld.js";import"./LinkIcon-CKhuJxKk.js";import"./SvgIcon-76a5Fjoi.js";import{r as h,P as N,D as I}from"./DatePickerCalendarHeader-C05DZxek.js";import{D as W}from"./datetime-B8oWyIaC.js";import{r as y}from"./index-Dl6G-zuu.js";import{i as _,a as F,b as z,c as b}from"./date-BlWqZk5L.js";import{s as A,e as L}from"./styled-Dt2_JBRt.js";import{a as j,b as E,D as M}from"./DatePickerActionBar-NMaBMbnw.js";import{_ as B,a as s}from"./ThemeProviderWrapper-Be5RUURM.js";import{P as e}from"./index-BfyspvgH.js";import{u as U}from"./shared-BVJop5V2.js";import{L as Y,s as H}from"./valueManagers-DfxpBv93.js";import{D as $}from"./PickerViewRoot-UUSpvxtv.js";import{v as G}from"./validateDate-YOAbBWzt.js";const K=["props","ref"],J=A(j)(({theme:a})=>({overflow:"hidden",minWidth:$,backgroundColor:(a.vars||a).palette.background.paper})),Q=a=>{var n;let{props:r,ref:o}=a,i=B(a,K);const{localeText:d,slots:l,slotProps:t,className:p,sx:c,displayStaticWrapperAs:f,autoFocus:k}=r,{layoutProps:R,renderCurrentView:O}=E(s({},i,{props:r,autoFocusView:k??!1,additionalViewProps:{},wrapperVariant:f})),S=(n=l==null?void 0:l.layout)!=null?n:J;return{renderPicker:()=>{var D,T,V;return u.jsx(Y,{localeText:d,children:u.jsx(S,s({},R,t==null?void 0:t.layout,{slots:l,slotProps:t,sx:[...Array.isArray(c)?c:[c],...Array.isArray(t==null||(D=t.layout)==null?void 0:D.sx)?t.layout.sx:[t==null||(T=t.layout)==null?void 0:T.sx]],className:L(p,t==null||(V=t.layout)==null?void 0:V.className),ref:o,children:O()}))})}}},g=y.forwardRef(function(n,r){var o,i,d;const l=U(n,"MuiStaticDatePicker"),t=(o=l.displayStaticWrapperAs)!=null?o:"mobile",p=s({day:h,month:h,year:h},l.viewRenderers),c=s({},l,{viewRenderers:p,displayStaticWrapperAs:t,yearsPerRow:(i=l.yearsPerRow)!=null?i:t==="mobile"?3:4,slotProps:s({},l.slotProps,{toolbar:s({hidden:t==="desktop"},(d=l.slotProps)==null?void 0:d.toolbar)})}),{renderPicker:f}=Q({props:c,valueManager:H,valueType:"date",validator:G,ref:r});return f()});g.propTypes={autoFocus:e.bool,className:e.string,components:e.object,componentsProps:e.object,dayOfWeekFormatter:e.func,defaultCalendarMonth:e.any,defaultValue:e.any,disabled:e.bool,disableFuture:e.bool,disableHighlightToday:e.bool,disablePast:e.bool,displayStaticWrapperAs:e.oneOf(["desktop","mobile"]),displayWeekNumber:e.bool,fixedWeekNumber:e.number,loading:e.bool,localeText:e.object,maxDate:e.any,minDate:e.any,monthsPerRow:e.oneOf([3,4]),onAccept:e.func,onChange:e.func,onClose:e.func,onError:e.func,onMonthChange:e.func,onViewChange:e.func,onYearChange:e.func,openTo:e.oneOf(["day","month","year"]),orientation:e.oneOf(["landscape","portrait"]),readOnly:e.bool,reduceAnimations:e.bool,referenceDate:e.any,renderLoading:e.func,shouldDisableDate:e.func,shouldDisableMonth:e.func,shouldDisableYear:e.func,showDaysOutsideCurrentMonth:e.bool,slotProps:e.object,slots:e.object,sx:e.oneOfType([e.arrayOf(e.oneOfType([e.func,e.object,e.bool])),e.func,e.object]),timezone:e.string,value:e.any,view:e.oneOf(["day","month","year"]),viewRenderers:e.shape({day:e.func,month:e.func,year:e.func}),views:e.arrayOf(e.oneOf(["day","month","year"]).isRequired),yearsPerRow:e.oneOf([3,4])};const X=A(N,{shouldForwardProp:a=>a!=="isSelected"&&a!=="isHovered"})(({isSelected:a,isHovered:n,day:r,today:o})=>({borderRadius:0,...o&&_(r)&&{"&.MuiPickersDay-root":{borderColor:"var(--base-color-neutral-400) ",borderLeft:"none !important",borderRight:"none !important"}},...o&&F(r)&&{"&.MuiPickersDay-root":{borderColor:"var(--base-color-neutral-400)",borderRight:"none !important"}},...o&&z(r)&&{"&.MuiPickersDay-root":{borderColor:"var(--base-color-neutral-400)",borderLeft:"none !important"}},...a&&{backgroundColor:"var(--datePickerCalendar-background-color-selected)",border:"none","&:focus, &:active":{backgroundColor:"var(--datePickerCalendar-background-color-selected)"},"&:hover:focus, &:hover:active":{background:"var(--datePickerCalendar-active background-selected)"}},...a&&!o&&{"&.MuiPickersDay-root":{color:"var(--datePickerCalendar-color-selected)","&.MuiPickersDay-dayOutsideMonth":{color:"var(--datePickerCalendar-color-selected)"}}},...a&&n&&!o&&{background:"var(--datePickerCalendar-hover-background-selected)","&:hover":{background:"var(--datePickerCalendar-hover-background-selected)"}},...a&&o&&{backgroundColor:"var(--datePickerCalendar-background-color)","&:focus":{backgroundColor:"var(--datePickerCalendar-background-color)"}},...!a&&{backgroundColor:"var(--datePickerCalendar-background-color)","&:focus":{"&.MuiPickersDay-root":{backgroundColor:"var(--datePickerCalendar-background-color)"}}},...n&&(!a||o)&&{background:"var(--datePickerCalendar-hover-background)","&:hover, &:focus":{background:"var(--datePickerCalendar-hover-background)",color:"var(--datePickerCalendar-color)"}},...r.weekday===7&&{borderTopLeftRadius:"50%",borderBottomLeftRadius:"50%"},...r.weekday===6&&{borderTopRightRadius:"50%",borderBottomRightRadius:"50%"}})),Z=a=>{const{day:n,selectedDay:r,hoveredDay:o,...i}=a;return u.jsx(X,{...i,day:n,disableMargin:!0,selected:!1,isSelected:b(n,r),isHovered:b(n,o),today:b(n,W.now())})},w=({className:a,slots:n,...r})=>{const[o,i]=y.useState(null),[d,l]=y.useState(W.now());return u.jsx(g,{className:v("DatePickerWeekCalendar",a),value:d,onChange:t=>l(t),showDaysOutsideCurrentMonth:!0,slots:{actionBar:M,calendarHeader:I,previousIconButton:m,day:Z,leftArrowIcon:P,nextIconButton:m,rightArrowIcon:q,switchViewButton:x,toolbar:void 0,...n},disableFuture:!0,slotProps:{actionBar:{actions:["today"]},day:t=>({selectedDay:d,hoveredDay:o,onPointerEnter:()=>i(t.day),onPointerLeave:()=>i(null),disableRipple:!0}),nextIconButton:{disableRipple:!0},previousIconButton:{disableRipple:!0}},...r})};try{w.displayName="DatePickerWeekCalendar",w.__docgenInfo={description:"",displayName:"DatePickerWeekCalendar",props:{className:{defaultValue:null,description:"Class name applied to the root element.",name:"className",required:!1,type:{name:"string"}},view:{defaultValue:null,description:"The visible view.\nUsed when the component view is controlled.\nMust be a valid option from `views` list.",name:"view",required:!1,type:{name:"enum",value:[{value:'"month"'},{value:'"day"'},{value:'"year"'}]}},defaultValue:{defaultValue:null,description:`The default value.
Used when the component is not controlled.`,name:"defaultValue",required:!1,type:{name:"DateTime<boolean> | null"}},autoFocus:{defaultValue:null,description:"If `true`, the main element is focused during the first mount.\nThis main element is:\n- the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n- the `input` element if there is a field rendered.",name:"autoFocus",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Callback fired when the value changes.\n@template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n@template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n@param value The new value.\n@param context The context containing the validation result of the current value.",name:"onChange",required:!1,type:{name:"((value: DateTime<boolean> | null, context: PickerChangeHandlerContext<DateValidationError>) => void)"}},onError:{defaultValue:null,description:"Callback fired when the error associated to the current value changes.\nIf the error has a non-null value, then the `TextField` will be rendered in `error` state.\n@template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n@template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n@param error The new error describing why the current value is not valid.\n@param value The value associated to the error.",name:"onError",required:!1,type:{name:"((error: DateValidationError, value: DateTime<boolean> | null) => void)"}},disabled:{defaultValue:{value:"false"},description:"If `true`, the picker and text field are disabled.",name:"disabled",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:`The selected value.
Used when the component is controlled.`,name:"value",required:!1,type:{name:"DateTime<boolean> | null"}},components:{defaultValue:{value:"{}"},description:"Overridable components.\n@deprecated Please use `slots`.",name:"components",required:!1,type:{name:"StaticDatePickerSlotsComponent<DateTime<boolean>>"}},componentsProps:{defaultValue:{value:"{}"},description:"The props used for each component slot.\n@deprecated Please use `slotProps`.",name:"componentsProps",required:!1,type:{name:"StaticDatePickerSlotsComponentsProps<DateTime<boolean>>"}},onClose:{defaultValue:null,description:"Callback fired when component requests to be closed.\nCan be fired when selecting (by default on `desktop` mode) or clearing a value.\n@deprecated Please avoid using as it will be removed in next major version.",name:"onClose",required:!1,type:{name:"(() => void)"}},slotProps:{defaultValue:{value:"{}"},description:"The props used for each component slot.",name:"slotProps",required:!1,type:{name:"StaticDatePickerSlotsComponentsProps<DateTime<boolean>>"}},slots:{defaultValue:{value:"{}"},description:"Overridable component slots.",name:"slots",required:!1,type:{name:"UncapitalizeObjectKeys<StaticDatePickerSlotsComponent<DateTime<boolean>>>"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},orientation:{defaultValue:null,description:"Force rendering in particular orientation.",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"portrait"'},{value:'"landscape"'}]}},loading:{defaultValue:{value:"false"},description:"If `true`, calls `renderLoading` instead of rendering the day calendar.\nCan be used to preload information and show it in calendar.",name:"loading",required:!1,type:{name:"boolean"}},views:{defaultValue:null,description:"Available views.",name:"views",required:!1,type:{name:"readonly DateView[]"}},onAccept:{defaultValue:null,description:"Callback fired when the value is accepted.\n@template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n@param value The value that was just accepted.",name:"onAccept",required:!1,type:{name:"((value: DateTime<boolean> | null) => void)"}},disableFuture:{defaultValue:{value:"false"},description:"If `true`, disable values after the current date for date components, time for time components and both for date time components.",name:"disableFuture",required:!1,type:{name:"boolean"}},disablePast:{defaultValue:{value:"false"},description:"If `true`, disable values before the current date for date components, time for time components and both for date time components.",name:"disablePast",required:!1,type:{name:"boolean"}},shouldDisableDate:{defaultValue:null,description:`Disable specific date.

Warning: This function can be called multiple times (e.g. when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
@template TDate
@param day The date to test.
@returns If \`true\` the date will be disabled.`,name:"shouldDisableDate",required:!1,type:{name:"((day: DateTime<boolean>) => boolean)"}},shouldDisableMonth:{defaultValue:null,description:`Disable specific month.
@template TDate
@param month The month to test.
@returns If \`true\`, the month will be disabled.`,name:"shouldDisableMonth",required:!1,type:{name:"((month: DateTime<boolean>) => boolean)"}},shouldDisableYear:{defaultValue:null,description:`Disable specific year.
@template TDate
@param year The year to test.
@returns If \`true\`, the year will be disabled.`,name:"shouldDisableYear",required:!1,type:{name:"((year: DateTime<boolean>) => boolean)"}},minDate:{defaultValue:null,description:"Minimal selectable date.",name:"minDate",required:!1,type:{name:"DateTime<boolean>"}},maxDate:{defaultValue:null,description:"Maximal selectable date.",name:"maxDate",required:!1,type:{name:"DateTime<boolean>"}},openTo:{defaultValue:null,description:"The default visible view.\nUsed when the component view is not controlled.\nMust be a valid option from `views` list.",name:"openTo",required:!1,type:{name:"enum",value:[{value:'"month"'},{value:'"day"'},{value:'"year"'}]}},onViewChange:{defaultValue:null,description:`Callback fired on view change.
@template TView
@param view The new view.`,name:"onViewChange",required:!1,type:{name:"((view: DateView) => void)"}},localeText:{defaultValue:null,description:"Locale for components texts.\nAllows overriding texts coming from `LocalizationProvider` and `theme`.",name:"localeText",required:!1,type:{name:"PickersInputComponentLocaleText<DateTime<boolean>>"}},viewRenderers:{defaultValue:null,description:"Define custom view renderers for each section.\nIf `null`, the section will only have field editing.\nIf `undefined`, internally defined view will be the used.",name:"viewRenderers",required:!1,type:{name:"Partial<PickerViewRendererLookup<DateTime<boolean> | null, DateView, DateViewRendererProps<DateTime<boolean>, DateView>, {}>>"}},reduceAnimations:{defaultValue:{value:"`@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13"},description:"If `true`, disable heavy animations.",name:"reduceAnimations",required:!1,type:{name:"boolean"}},referenceDate:{defaultValue:{value:"The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`."},description:"The date used to generate the new value when both `value` and `defaultValue` are empty.",name:"referenceDate",required:!1,type:{name:"DateTime<boolean>"}},timezone:{defaultValue:{value:"The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise."},description:`Choose which timezone to use for the value.
Example: "default", "system", "UTC", "America/New_York".
If you pass values from other timezones to some props, they will be converted to this timezone before being used.
@see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.`,name:"timezone",required:!1,type:{name:"string"}},yearsPerRow:{defaultValue:{value:"3"},description:"Years rendered per row.",name:"yearsPerRow",required:!1,type:{name:"enum",value:[{value:"3"},{value:"4"}]}},defaultCalendarMonth:{defaultValue:null,description:"Default calendar month displayed when `value` and `defaultValue` are empty.",name:"defaultCalendarMonth",required:!1,type:{name:"DateTime<boolean>"}},renderLoading:{defaultValue:{value:'() => <span data-mui-test="loading-progress">...</span>'},description:"Component displaying when passed `loading` true.\n@returns The node to render when loading.",name:"renderLoading",required:!1,type:{name:"(() => ReactNode)"}},onYearChange:{defaultValue:null,description:`Callback fired on year change.
@template TDate
@param year The new year.`,name:"onYearChange",required:!1,type:{name:"((year: DateTime<boolean>) => void)"}},onMonthChange:{defaultValue:null,description:`Callback fired on month change.
@template TDate
@param month The new month.`,name:"onMonthChange",required:!1,type:{name:"((month: DateTime<boolean>) => void)"}},dayOfWeekFormatter:{defaultValue:{value:"(_day: string, date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()"},description:`Formats the day of week displayed in the calendar header.
@param day The day of week provided by the adapter.  Deprecated, will be removed in v7: Use \`date\` instead.
@param date The date of the day of week provided by the adapter.
@returns The name to display.`,name:"dayOfWeekFormatter",required:!1,type:{name:"((day: string, date: DateTime<boolean>) => string)"}},displayWeekNumber:{defaultValue:null,description:"If `true`, the week number will be display in the calendar.",name:"displayWeekNumber",required:!1,type:{name:"boolean"}},fixedWeekNumber:{defaultValue:{value:"undefined"},description:`Calendar will show more weeks in order to match this value.
Put it to 6 for having fix number of week in Gregorian calendars`,name:"fixedWeekNumber",required:!1,type:{name:"number"}},disableHighlightToday:{defaultValue:{value:"false"},description:"If `true`, today's date is rendering without highlighting with circle.",name:"disableHighlightToday",required:!1,type:{name:"boolean"}},showDaysOutsideCurrentMonth:{defaultValue:{value:"false"},description:"If `true`, days outside the current month are rendered:\n\n- if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n\n- if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n\n- ignored if `calendars` equals more than `1` on range pickers.",name:"showDaysOutsideCurrentMonth",required:!1,type:{name:"boolean"}},monthsPerRow:{defaultValue:{value:"3"},description:"Months rendered per row.",name:"monthsPerRow",required:!1,type:{name:"enum",value:[{value:"3"},{value:"4"}]}},displayStaticWrapperAs:{defaultValue:{value:'"mobile"'},description:"Force static wrapper inner components to be rendered in mobile or desktop mode.",name:"displayStaticWrapperAs",required:!1,type:{name:"enum",value:[{value:'"mobile"'},{value:'"desktop"'}]}}}}}catch{}const C=({className:a,view:n,slots:r,openTo:o,...i})=>{let d=[],l="day",t;if(n==="day")d=["year","month","day"],t=["today"];else{if(n==="week")return u.jsx(w,{className:v("DatePickerCalendar",a),slots:r,views:["year","month","day"],...i});n==="month"?(l="month",d=["year","month"],t=["today"]):n==="year"&&(l="year",d=["year"])}return u.jsx(g,{className:v("DatePickerCalendar",a),slotProps:{actionBar:{actions:t},day:{disableRipple:!0}},showDaysOutsideCurrentMonth:!0,slots:{actionBar:M,calendarHeader:I,previousIconButton:m,leftArrowIcon:P,nextIconButton:m,rightArrowIcon:q,switchViewButton:x,toolbar:void 0,...r},disableFuture:!0,openTo:l,views:d,...i})};try{C.displayName="DatePickerCalendar",C.__docgenInfo={description:"",displayName:"DatePickerCalendar",props:{className:{defaultValue:null,description:"Class name applied to the root element.",name:"className",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:`The default value.
Used when the component is not controlled.`,name:"defaultValue",required:!1,type:{name:"DateTime<boolean> | null"}},autoFocus:{defaultValue:null,description:"If `true`, the main element is focused during the first mount.\nThis main element is:\n- the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n- the `input` element if there is a field rendered.",name:"autoFocus",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Callback fired when the value changes.\n@template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n@template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n@param value The new value.\n@param context The context containing the validation result of the current value.",name:"onChange",required:!1,type:{name:"((value: DateTime<boolean> | null, context: PickerChangeHandlerContext<DateValidationError>) => void)"}},onError:{defaultValue:null,description:"Callback fired when the error associated to the current value changes.\nIf the error has a non-null value, then the `TextField` will be rendered in `error` state.\n@template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n@template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n@param error The new error describing why the current value is not valid.\n@param value The value associated to the error.",name:"onError",required:!1,type:{name:"((error: DateValidationError, value: DateTime<boolean> | null) => void)"}},disabled:{defaultValue:{value:"false"},description:"If `true`, the picker and text field are disabled.",name:"disabled",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:`The selected value.
Used when the component is controlled.`,name:"value",required:!1,type:{name:"DateTime<boolean> | null"}},components:{defaultValue:{value:"{}"},description:"Overridable components.\n@deprecated Please use `slots`.",name:"components",required:!1,type:{name:"StaticDatePickerSlotsComponent<DateTime<boolean>>"}},componentsProps:{defaultValue:{value:"{}"},description:"The props used for each component slot.\n@deprecated Please use `slotProps`.",name:"componentsProps",required:!1,type:{name:"StaticDatePickerSlotsComponentsProps<DateTime<boolean>>"}},onClose:{defaultValue:null,description:"Callback fired when component requests to be closed.\nCan be fired when selecting (by default on `desktop` mode) or clearing a value.\n@deprecated Please avoid using as it will be removed in next major version.",name:"onClose",required:!1,type:{name:"(() => void)"}},slots:{defaultValue:{value:"{}"},description:"Overridable component slots.",name:"slots",required:!1,type:{name:"UncapitalizeObjectKeys<StaticDatePickerSlotsComponent<DateTime<boolean>>>"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},orientation:{defaultValue:null,description:"Force rendering in particular orientation.",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"portrait"'},{value:'"landscape"'}]}},loading:{defaultValue:{value:"false"},description:"If `true`, calls `renderLoading` instead of rendering the day calendar.\nCan be used to preload information and show it in calendar.",name:"loading",required:!1,type:{name:"boolean"}},views:{defaultValue:null,description:"Available views.",name:"views",required:!1,type:{name:"readonly DateView[]"}},onAccept:{defaultValue:null,description:"Callback fired when the value is accepted.\n@template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n@param value The value that was just accepted.",name:"onAccept",required:!1,type:{name:"((value: DateTime<boolean> | null) => void)"}},disableFuture:{defaultValue:{value:"false"},description:"If `true`, disable values after the current date for date components, time for time components and both for date time components.",name:"disableFuture",required:!1,type:{name:"boolean"}},disablePast:{defaultValue:{value:"false"},description:"If `true`, disable values before the current date for date components, time for time components and both for date time components.",name:"disablePast",required:!1,type:{name:"boolean"}},shouldDisableDate:{defaultValue:null,description:`Disable specific date.

Warning: This function can be called multiple times (e.g. when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
@template TDate
@param day The date to test.
@returns If \`true\` the date will be disabled.`,name:"shouldDisableDate",required:!1,type:{name:"((day: DateTime<boolean>) => boolean)"}},shouldDisableMonth:{defaultValue:null,description:`Disable specific month.
@template TDate
@param month The month to test.
@returns If \`true\`, the month will be disabled.`,name:"shouldDisableMonth",required:!1,type:{name:"((month: DateTime<boolean>) => boolean)"}},shouldDisableYear:{defaultValue:null,description:`Disable specific year.
@template TDate
@param year The year to test.
@returns If \`true\`, the year will be disabled.`,name:"shouldDisableYear",required:!1,type:{name:"((year: DateTime<boolean>) => boolean)"}},minDate:{defaultValue:null,description:"Minimal selectable date.",name:"minDate",required:!1,type:{name:"DateTime<boolean>"}},maxDate:{defaultValue:null,description:"Maximal selectable date.",name:"maxDate",required:!1,type:{name:"DateTime<boolean>"}},openTo:{defaultValue:null,description:"The default visible view.\nUsed when the component view is not controlled.\nMust be a valid option from `views` list.",name:"openTo",required:!1,type:{name:"enum",value:[{value:'"month"'},{value:'"day"'},{value:'"year"'}]}},onViewChange:{defaultValue:null,description:`Callback fired on view change.
@template TView
@param view The new view.`,name:"onViewChange",required:!1,type:{name:"((view: DateView) => void)"}},localeText:{defaultValue:null,description:"Locale for components texts.\nAllows overriding texts coming from `LocalizationProvider` and `theme`.",name:"localeText",required:!1,type:{name:"PickersInputComponentLocaleText<DateTime<boolean>>"}},viewRenderers:{defaultValue:null,description:"Define custom view renderers for each section.\nIf `null`, the section will only have field editing.\nIf `undefined`, internally defined view will be the used.",name:"viewRenderers",required:!1,type:{name:"Partial<PickerViewRendererLookup<DateTime<boolean> | null, DateView, DateViewRendererProps<DateTime<boolean>, DateView>, {}>>"}},reduceAnimations:{defaultValue:{value:"`@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13"},description:"If `true`, disable heavy animations.",name:"reduceAnimations",required:!1,type:{name:"boolean"}},referenceDate:{defaultValue:{value:"The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`."},description:"The date used to generate the new value when both `value` and `defaultValue` are empty.",name:"referenceDate",required:!1,type:{name:"DateTime<boolean>"}},timezone:{defaultValue:{value:"The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise."},description:`Choose which timezone to use for the value.
Example: "default", "system", "UTC", "America/New_York".
If you pass values from other timezones to some props, they will be converted to this timezone before being used.
@see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.`,name:"timezone",required:!1,type:{name:"string"}},yearsPerRow:{defaultValue:{value:"3"},description:"Years rendered per row.",name:"yearsPerRow",required:!1,type:{name:"enum",value:[{value:"3"},{value:"4"}]}},defaultCalendarMonth:{defaultValue:null,description:"Default calendar month displayed when `value` and `defaultValue` are empty.",name:"defaultCalendarMonth",required:!1,type:{name:"DateTime<boolean>"}},renderLoading:{defaultValue:{value:'() => <span data-mui-test="loading-progress">...</span>'},description:"Component displaying when passed `loading` true.\n@returns The node to render when loading.",name:"renderLoading",required:!1,type:{name:"(() => ReactNode)"}},onYearChange:{defaultValue:null,description:`Callback fired on year change.
@template TDate
@param year The new year.`,name:"onYearChange",required:!1,type:{name:"((year: DateTime<boolean>) => void)"}},onMonthChange:{defaultValue:null,description:`Callback fired on month change.
@template TDate
@param month The new month.`,name:"onMonthChange",required:!1,type:{name:"((month: DateTime<boolean>) => void)"}},dayOfWeekFormatter:{defaultValue:{value:"(_day: string, date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()"},description:`Formats the day of week displayed in the calendar header.
@param day The day of week provided by the adapter.  Deprecated, will be removed in v7: Use \`date\` instead.
@param date The date of the day of week provided by the adapter.
@returns The name to display.`,name:"dayOfWeekFormatter",required:!1,type:{name:"((day: string, date: DateTime<boolean>) => string)"}},displayWeekNumber:{defaultValue:null,description:"If `true`, the week number will be display in the calendar.",name:"displayWeekNumber",required:!1,type:{name:"boolean"}},fixedWeekNumber:{defaultValue:{value:"undefined"},description:`Calendar will show more weeks in order to match this value.
Put it to 6 for having fix number of week in Gregorian calendars`,name:"fixedWeekNumber",required:!1,type:{name:"number"}},disableHighlightToday:{defaultValue:{value:"false"},description:"If `true`, today's date is rendering without highlighting with circle.",name:"disableHighlightToday",required:!1,type:{name:"boolean"}},showDaysOutsideCurrentMonth:{defaultValue:{value:"false"},description:"If `true`, days outside the current month are rendered:\n\n- if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n\n- if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n\n- ignored if `calendars` equals more than `1` on range pickers.",name:"showDaysOutsideCurrentMonth",required:!1,type:{name:"boolean"}},monthsPerRow:{defaultValue:{value:"3"},description:"Months rendered per row.",name:"monthsPerRow",required:!1,type:{name:"enum",value:[{value:"3"},{value:"4"}]}},displayStaticWrapperAs:{defaultValue:{value:'"mobile"'},description:"Force static wrapper inner components to be rendered in mobile or desktop mode.",name:"displayStaticWrapperAs",required:!1,type:{name:"enum",value:[{value:'"mobile"'},{value:'"desktop"'}]}},view:{defaultValue:null,description:"",name:"view",required:!1,type:{name:"enum",value:[{value:'"month"'},{value:'"week"'},{value:'"day"'},{value:'"year"'}]}}}}}catch{}export{C as D};
