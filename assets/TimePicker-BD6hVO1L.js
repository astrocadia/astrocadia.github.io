import{j as b}from"./jsx-runtime-4WDyTGeM.js";import{c as ne}from"./index-eOQoo3sK.js";import{P as le,u as ie,D as se}from"./DatePickerActionBar-NMaBMbnw.js";import{D as re}from"./DialogTitle-BOC1lOt5.js";import{D as ue}from"./DigitalClockSectionItem-BJfIRF7K.js";import{I as de}from"./InputAdornment-B5oVS-sc.js";import{I as me}from"./InputAdornmentButton-CL6prMWf.js";/* empty css                                 */import"./ControlledTextField-BIRBLCqk.js";import{T as pe}from"./TextField-H_O97xAh.js";import{P as ce}from"./PickersShortcuts-DXpAxGJx.js";import{a as n,_ as M}from"./ThemeProviderWrapper-Be5RUURM.js";import{r as q}from"./index-Dl6G-zuu.js";import{a as D,D as fe}from"./utils-C_cNsDj2.js";import{u as F,b as be,c as he,s as L,f as Te}from"./styled-Dt2_JBRt.js";import{u as ve}from"./useMediaQuery-BI_VLzxJ.js";import{P as e}from"./index-BfyspvgH.js";import{s as $,g as ye,b as O,d as A,G as E,f as Pe,I as B}from"./valueManagers-DfxpBv93.js";import{P as we,a as I,r as ke,b as N,c as ge,d as j}from"./date-time-utils-9g6I59vD.js";import{b as xe}from"./PickerViewRoot-UUSpvxtv.js";import{u as Ve}from"./useTheme-DLZNzqMo.js";import{v as z}from"./validateTime-DRbu2EZP.js";import{C as Ce}from"./index-B9Uzdy41.js";import{s as De,u as Ie,a as Me,e as W}from"./useClearableField-CWuHXoNZ.js";import{T as Se}from"./TextField-DCGEi-Ha.js";import{u as qe}from"./useSlotProps-CP3WIws3.js";import{r as H}from"./mergeSlotProps-D2P12luN.js";import{u as Oe,r as Q,a as Re}from"./useMobilePicker-s5u1H2KW.js";const Fe=a=>{var o,i,s,t;const u=O(),p=((o=a.ampm)!=null?o:u.is12HourCycleInCurrentLocale())?u.formats.fullTime12h:u.formats.fullTime24h;return n({},a,{disablePast:(i=a.disablePast)!=null?i:!1,disableFuture:(s=a.disableFuture)!=null?s:!1,format:(t=a.format)!=null?t:p})},Le=({props:a,inputRef:o})=>{const i=Fe(a),{forwardedProps:s,internalProps:t}=De(i,"time");return Ie({inputRef:o,forwardedProps:s,internalProps:t,valueManager:$,fieldValueManager:ye,validator:z,valueType:"time"})},_e=["slots","slotProps","components","componentsProps","InputProps","inputProps"],je=["inputRef"],$e=["ref","onPaste","onKeyDown","inputMode","readOnly","clearable","onClear"],K=q.forwardRef(function(o,i){var s,t,u;const m=F({props:o,name:"MuiTimeField"}),{slots:p,slotProps:l,components:r,componentsProps:h,InputProps:d,inputProps:f}=m,c=M(m,_e),k=m,T=(s=(t=p==null?void 0:p.textField)!=null?t:r==null?void 0:r.TextField)!=null?s:Se,g=qe({elementType:T,externalSlotProps:(u=l==null?void 0:l.textField)!=null?u:h==null?void 0:h.textField,externalForwardedProps:c,ownerState:k}),{inputRef:x}=g,y=M(g,je);y.inputProps=n({},f,y.inputProps),y.InputProps=n({},d,y.InputProps);const C=Le({props:y,inputRef:x}),{ref:P,onPaste:v,onKeyDown:V,inputMode:w,readOnly:R,clearable:ee,onClear:oe}=C,_=M(C,$e),{InputProps:ae,fieldProps:te}=Me({onClear:oe,clearable:ee,fieldProps:_,InputProps:_.InputProps,slots:p,slotProps:l,components:r,componentsProps:h});return b.jsx(T,n({ref:i},te,{InputProps:n({},ae,{readOnly:R}),inputProps:n({},_.inputProps,{inputMode:w,onPaste:v,onKeyDown:V,ref:P})}))});function Ae(a){return he("MuiTimePickerToolbar",a)}const S=be("MuiTimePickerToolbar",["root","separator","hourMinuteLabel","hourMinuteLabelLandscape","hourMinuteLabelReverse","ampmSelection","ampmLandscape","ampmLabel"]),ze=["ampm","ampmInClock","value","isLandscape","onChange","view","onViewChange","views","disabled","readOnly"],Ee=a=>{const{theme:o,isLandscape:i,classes:s}=a,t={root:["root"],separator:["separator"],hourMinuteLabel:["hourMinuteLabel",i&&"hourMinuteLabelLandscape",o.direction==="rtl"&&"hourMinuteLabelReverse"],ampmSelection:["ampmSelection",i&&"ampmLandscape"],ampmLabel:["ampmLabel"]};return Te(t,Ae,s)},Ne=L(le,{name:"MuiTimePickerToolbar",slot:"Root",overridesResolver:(a,o)=>o.root})({}),Ue=L(we,{name:"MuiTimePickerToolbar",slot:"Separator",overridesResolver:(a,o)=>o.separator})({outline:0,margin:"0 4px 0 2px",cursor:"default"}),Y=L("div",{name:"MuiTimePickerToolbar",slot:"HourMinuteLabel",overridesResolver:(a,o)=>[{[`&.${S.hourMinuteLabelLandscape}`]:o.hourMinuteLabelLandscape,[`&.${S.hourMinuteLabelReverse}`]:o.hourMinuteLabelReverse},o.hourMinuteLabel]})(({theme:a,ownerState:o})=>n({display:"flex",justifyContent:"flex-end",alignItems:"flex-end"},o.isLandscape&&{marginTop:"auto"},a.direction==="rtl"&&{flexDirection:"row-reverse"}));Y.propTypes={as:e.elementType,ownerState:e.object.isRequired,sx:e.oneOfType([e.arrayOf(e.oneOfType([e.func,e.object,e.bool])),e.func,e.object])};const G=L("div",{name:"MuiTimePickerToolbar",slot:"AmPmSelection",overridesResolver:(a,o)=>[{[`.${S.ampmLabel}`]:o.ampmLabel},{[`&.${S.ampmLandscape}`]:o.ampmLandscape},o.ampmSelection]})(({ownerState:a})=>n({display:"flex",flexDirection:"column",marginRight:"auto",marginLeft:12},a.isLandscape&&{margin:"4px 0 auto",flexDirection:"row",justifyContent:"space-around",flexBasis:"100%"},{[`& .${S.ampmLabel}`]:{fontSize:17}}));G.propTypes={as:e.elementType,ownerState:e.object.isRequired,sx:e.oneOfType([e.arrayOf(e.oneOfType([e.func,e.object,e.bool])),e.func,e.object])};function Be(a){const o=F({props:a,name:"MuiTimePickerToolbar"}),{ampm:i,ampmInClock:s,value:t,isLandscape:u,onChange:m,view:p,onViewChange:l,views:r,disabled:h,readOnly:d}=o,f=M(o,ze),c=O(),k=A(),T=Ve(),g=!!(i&&!s&&r.includes("hours")),{meridiemMode:x,handleMeridiemChange:y}=xe(t,i,m),C=w=>i?c.format(w,"hours12h"):c.format(w,"hours24h"),P=o,v=Ee(n({},P,{theme:T})),V=b.jsx(Ue,{tabIndex:-1,value:":",variant:"h3",selected:!1,className:v.separator});return b.jsxs(Ne,n({landscapeDirection:"row",toolbarTitle:k.timePickerToolbarTitle,isLandscape:u,ownerState:P,className:v.root},f,{children:[b.jsxs(Y,{className:v.hourMinuteLabel,ownerState:P,children:[D(r,"hours")&&b.jsx(I,{tabIndex:-1,variant:"h3",onClick:()=>l("hours"),selected:p==="hours",value:t?C(t):"--"}),D(r,["hours","minutes"])&&V,D(r,"minutes")&&b.jsx(I,{tabIndex:-1,variant:"h3",onClick:()=>l("minutes"),selected:p==="minutes",value:t?c.format(t,"minutes"):"--"}),D(r,["minutes","seconds"])&&V,D(r,"seconds")&&b.jsx(I,{variant:"h3",onClick:()=>l("seconds"),selected:p==="seconds",value:t?c.format(t,"seconds"):"--"})]}),g&&b.jsxs(G,{className:v.ampmSelection,ownerState:P,children:[b.jsx(I,{disableRipple:!0,variant:"subtitle2",selected:x==="am",typographyClassName:v.ampmLabel,value:E(c,"am"),onClick:d?void 0:()=>y("am"),disabled:h}),b.jsx(I,{disableRipple:!0,variant:"subtitle2",selected:x==="pm",typographyClassName:v.ampmLabel,value:E(c,"pm"),onClick:d?void 0:()=>y("pm"),disabled:h})]})]}))}function J(a,o){var i,s,t,u,m;const p=O(),l=F({props:a,name:o}),r=(i=l.ampm)!=null?i:p.is12HourCycleInCurrentLocale(),h=q.useMemo(()=>{var c;return((c=l.localeText)==null?void 0:c.toolbarTitle)==null?l.localeText:n({},l.localeText,{timePickerToolbarTitle:l.localeText.toolbarTitle})},[l.localeText]),d=(s=l.slots)!=null?s:ie(l.components),f=(t=l.slotProps)!=null?t:l.componentsProps;return n({},l,{ampm:r,localeText:h},Pe({views:l.views,openTo:l.openTo,defaultViews:["hours","minutes"],defaultOpenTo:"hours"}),{disableFuture:(u=l.disableFuture)!=null?u:!1,disablePast:(m=l.disablePast)!=null?m:!1,slots:n({toolbar:Be},d),slotProps:n({},f,{toolbar:n({ampm:r,ampmInClock:l.ampmInClock},f==null?void 0:f.toolbar)})})}const X=q.forwardRef(function(o,i){var s,t,u,m,p,l;const r=A(),h=O(),d=J(o,"MuiDesktopTimePicker"),{shouldRenderTimeInASingleColumn:f,views:c,timeSteps:k}=ke(d),T=f?ge:N,g=n({hours:T,minutes:T,seconds:T,meridiem:T},d.viewRenderers),x=(s=d.ampmInClock)!=null?s:!0,y=f?[]:["accept"],P=((t=g.hours)==null?void 0:t.name)===N.name?c:c.filter(w=>w!=="meridiem"),v=n({},d,{ampmInClock:x,timeSteps:k,viewRenderers:g,format:B(h,d),views:f?["hours"]:P,slots:n({field:K,openPickerIcon:Ce},d.slots),slotProps:n({},d.slotProps,{field:w=>{var R;return n({},H((R=d.slotProps)==null?void 0:R.field,w),W(d),{ref:i})},toolbar:n({hidden:!0,ampmInClock:x},(u=d.slotProps)==null?void 0:u.toolbar),actionBar:n({actions:y},(m=d.slotProps)==null?void 0:m.actionBar)})}),{renderPicker:V}=Oe({props:v,valueManager:$,valueType:"time",getOpenDialogAriaText:(p=(l=v.localeText)==null?void 0:l.openTimePickerDialogue)!=null?p:r.openTimePickerDialogue,validator:z});return V()});X.propTypes={ampm:e.bool,ampmInClock:e.bool,autoFocus:e.bool,className:e.string,closeOnSelect:e.bool,components:e.object,componentsProps:e.object,defaultValue:e.any,disabled:e.bool,disableFuture:e.bool,disableIgnoringDatePartForTimeValidation:e.bool,disableOpenPicker:e.bool,disablePast:e.bool,format:e.string,formatDensity:e.oneOf(["dense","spacious"]),inputRef:Q,label:e.node,localeText:e.object,maxTime:e.any,minTime:e.any,minutesStep:e.number,onAccept:e.func,onChange:e.func,onClose:e.func,onError:e.func,onOpen:e.func,onSelectedSectionsChange:e.func,onViewChange:e.func,open:e.bool,openTo:e.oneOf(["hours","meridiem","minutes","seconds"]),orientation:e.oneOf(["landscape","portrait"]),readOnly:e.bool,reduceAnimations:e.bool,referenceDate:e.any,selectedSections:e.oneOfType([e.oneOf(["all","day","hours","meridiem","minutes","month","seconds","weekDay","year"]),e.number,e.shape({endIndex:e.number.isRequired,startIndex:e.number.isRequired})]),shouldDisableClock:e.func,shouldDisableTime:e.func,skipDisabled:e.bool,slotProps:e.object,slots:e.object,sx:e.oneOfType([e.arrayOf(e.oneOfType([e.func,e.object,e.bool])),e.func,e.object]),thresholdToRenderTimeInASingleColumn:e.number,timeSteps:e.shape({hours:e.number,minutes:e.number,seconds:e.number}),timezone:e.string,value:e.any,view:e.oneOf(["hours","meridiem","minutes","seconds"]),viewRenderers:e.shape({hours:e.func,meridiem:e.func,minutes:e.func,seconds:e.func}),views:e.arrayOf(e.oneOf(["hours","minutes","seconds"]).isRequired)};const Z=q.forwardRef(function(o,i){var s,t,u,m;const p=A(),l=O(),r=J(o,"MuiMobileTimePicker"),h=n({hours:j,minutes:j,seconds:j},r.viewRenderers),d=(s=r.ampmInClock)!=null?s:!1,f=n({},r,{ampmInClock:d,viewRenderers:h,format:B(l,r),slots:n({field:K},r.slots),slotProps:n({},r.slotProps,{field:k=>{var T;return n({},H((T=r.slotProps)==null?void 0:T.field,k),W(r),{ref:i})},toolbar:n({hidden:!1,ampmInClock:d},(t=r.slotProps)==null?void 0:t.toolbar)})}),{renderPicker:c}=Re({props:f,valueManager:$,valueType:"time",getOpenDialogAriaText:(u=(m=f.localeText)==null?void 0:m.openTimePickerDialogue)!=null?u:p.openTimePickerDialogue,validator:z});return c()});Z.propTypes={ampm:e.bool,ampmInClock:e.bool,autoFocus:e.bool,className:e.string,closeOnSelect:e.bool,components:e.object,componentsProps:e.object,defaultValue:e.any,disabled:e.bool,disableFuture:e.bool,disableIgnoringDatePartForTimeValidation:e.bool,disableOpenPicker:e.bool,disablePast:e.bool,format:e.string,formatDensity:e.oneOf(["dense","spacious"]),inputRef:Q,label:e.node,localeText:e.object,maxTime:e.any,minTime:e.any,minutesStep:e.number,onAccept:e.func,onChange:e.func,onClose:e.func,onError:e.func,onOpen:e.func,onSelectedSectionsChange:e.func,onViewChange:e.func,open:e.bool,openTo:e.oneOf(["hours","minutes","seconds"]),orientation:e.oneOf(["landscape","portrait"]),readOnly:e.bool,reduceAnimations:e.bool,referenceDate:e.any,selectedSections:e.oneOfType([e.oneOf(["all","day","hours","meridiem","minutes","month","seconds","weekDay","year"]),e.number,e.shape({endIndex:e.number.isRequired,startIndex:e.number.isRequired})]),shouldDisableClock:e.func,shouldDisableTime:e.func,slotProps:e.object,slots:e.object,sx:e.oneOfType([e.arrayOf(e.oneOfType([e.func,e.object,e.bool])),e.func,e.object]),timezone:e.string,value:e.any,view:e.oneOf(["hours","minutes","seconds"]),viewRenderers:e.shape({hours:e.func,minutes:e.func,seconds:e.func}),views:e.arrayOf(e.oneOf(["hours","minutes","seconds"]).isRequired)};const We=["desktopModeMediaQuery"],He=q.forwardRef(function(o,i){const s=F({props:o,name:"MuiTimePicker"}),{desktopModeMediaQuery:t=fe}=s,u=M(s,We);return ve(t,{defaultMatches:!0})?b.jsx(X,n({ref:i},u)):b.jsx(Z,n({ref:i},u))}),U=({className:a,error:o,helperText:i,slots:s={},slotProps:t={},...u})=>b.jsx(He,{className:ne("TimePicker",a),slots:{inputAdornment:de,textField:pe,dialog:re,openPickerButton:me,digitalClockSectionItem:ue,actionBar:se,shortcuts:ce,...s},slotProps:{layout:{className:"MultiSectionDigitalClock"},textField:{error:o,helperText:i},...t},...u});try{U.displayName="TimePicker",U.__docgenInfo={description:"",displayName:"TimePicker",props:{error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},helperText:{defaultValue:null,description:"",name:"helperText",required:!1,type:{name:"string"}},slotProps:{defaultValue:{value:"{}"},description:"",name:"slotProps",required:!1,type:{name:"DateTimePickerSlotProps<DateTime<boolean>>"}},className:{defaultValue:null,description:"Class name applied to the root element.",name:"className",required:!1,type:{name:"string"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},label:{defaultValue:null,description:"The label content.",name:"label",required:!1,type:{name:"ReactNode"}},view:{defaultValue:null,description:"The visible view.\nUsed when the component view is controlled.\nMust be a valid option from `views` list.",name:"view",required:!1,type:{name:"enum",value:[{value:'"hours"'},{value:'"minutes"'},{value:'"seconds"'},{value:'"meridiem"'}]}},defaultValue:{defaultValue:null,description:`The default value.
Used when the component is not controlled.`,name:"defaultValue",required:!1,type:{name:"DateTime<boolean> | null"}},autoFocus:{defaultValue:null,description:"If `true`, the main element is focused during the first mount.\nThis main element is:\n- the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n- the `input` element if there is a field rendered.",name:"autoFocus",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Callback fired when the value changes.\n@template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n@template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n@param value The new value.\n@param context The context containing the validation result of the current value.",name:"onChange",required:!1,type:{name:"((value: DateTime<boolean> | null, context: PickerChangeHandlerContext<TimeValidationError>) => void)"}},onError:{defaultValue:null,description:"Callback fired when the error associated to the current value changes.\nIf the error has a non-null value, then the `TextField` will be rendered in `error` state.\n@template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n@template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n@param error The new error describing why the current value is not valid.\n@param value The value associated to the error.",name:"onError",required:!1,type:{name:"((error: TimeValidationError, value: DateTime<boolean> | null) => void)"}},disabled:{defaultValue:{value:"false"},description:"If `true`, the picker and text field are disabled.",name:"disabled",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:`The selected value.
Used when the component is controlled.`,name:"value",required:!1,type:{name:"DateTime<boolean> | null"}},components:{defaultValue:{value:"{}"},description:"Overridable components.\n@deprecated Please use `slots`.",name:"components",required:!1,type:{name:"TimePickerSlotsComponents<DateTime<boolean>>"}},componentsProps:{defaultValue:{value:"{}"},description:"The props used for each component slot.\n@deprecated Please use `slotProps`.",name:"componentsProps",required:!1,type:{name:"TimePickerSlotsComponentsProps<DateTime<boolean>>"}},onClose:{defaultValue:null,description:"Callback fired when the popup requests to be closed.\nUse in controlled mode (see `open`).",name:"onClose",required:!1,type:{name:"(() => void)"}},onOpen:{defaultValue:null,description:"Callback fired when the popup requests to be opened.\nUse in controlled mode (see `open`).",name:"onOpen",required:!1,type:{name:"(() => void)"}},open:{defaultValue:{value:"false"},description:"Control the popup or dialog open state.",name:"open",required:!1,type:{name:"boolean"}},slots:{defaultValue:{value:"{}"},description:"Overridable component slots.",name:"slots",required:!1,type:{name:"UncapitalizeObjectKeys<TimePickerSlotsComponents<DateTime<boolean>>>"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement>"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},orientation:{defaultValue:null,description:"Force rendering in particular orientation.",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"portrait"'},{value:'"landscape"'}]}},views:{defaultValue:null,description:"Available views.",name:"views",required:!1,type:{name:"readonly TimeView[]"}},format:{defaultValue:null,description:"Format of the date when rendered in the input(s).\nDefaults to localized format based on the used `views`.",name:"format",required:!1,type:{name:"string"}},onAccept:{defaultValue:null,description:"Callback fired when the value is accepted.\n@template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n@param value The value that was just accepted.",name:"onAccept",required:!1,type:{name:"((value: DateTime<boolean> | null) => void)"}},disableFuture:{defaultValue:{value:"false"},description:"If `true`, disable values after the current date for date components, time for time components and both for date time components.",name:"disableFuture",required:!1,type:{name:"boolean"}},disablePast:{defaultValue:{value:"false"},description:"If `true`, disable values before the current date for date components, time for time components and both for date time components.",name:"disablePast",required:!1,type:{name:"boolean"}},openTo:{defaultValue:null,description:"The default visible view.\nUsed when the component view is not controlled.\nMust be a valid option from `views` list.",name:"openTo",required:!1,type:{name:"enum",value:[{value:'"hours"'},{value:'"minutes"'},{value:'"seconds"'},{value:'"meridiem"'}]}},onViewChange:{defaultValue:null,description:`Callback fired on view change.
@template TView
@param view The new view.`,name:"onViewChange",required:!1,type:{name:"((view: TimeViewWithMeridiem) => void)"}},localeText:{defaultValue:null,description:"Locale for components texts.\nAllows overriding texts coming from `LocalizationProvider` and `theme`.",name:"localeText",required:!1,type:{name:"PickersInputComponentLocaleText<DateTime<boolean>>"}},viewRenderers:{defaultValue:null,description:"Define custom view renderers for each section.\nIf `null`, the section will only have field editing.\nIf `undefined`, internally defined view will be the used.",name:"viewRenderers",required:!1,type:{name:"Partial<PickerViewRendererLookup<DateTime<boolean> | null, TimeViewWithMeridiem, TimeViewRendererProps<TimeViewWithMeridiem, BaseClockProps<DateTime<boolean>, TimeViewWithMeridiem>>, {}>>"}},reduceAnimations:{defaultValue:{value:"`@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13"},description:"If `true`, disable heavy animations.",name:"reduceAnimations",required:!1,type:{name:"boolean"}},referenceDate:{defaultValue:{value:"The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`."},description:"The date used to generate the new value when both `value` and `defaultValue` are empty.",name:"referenceDate",required:!1,type:{name:"DateTime<boolean>"}},timezone:{defaultValue:{value:"The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise."},description:`Choose which timezone to use for the value.
Example: "default", "system", "UTC", "America/New_York".
If you pass values from other timezones to some props, they will be converted to this timezone before being used.
@see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.`,name:"timezone",required:!1,type:{name:"string"}},selectedSections:{defaultValue:null,description:"The currently selected sections.\nThis prop accept four formats:\n1. If a number is provided, the section at this index will be selected.\n2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\n3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n4. If `null` is provided, no section will be selected\nIf not provided, the selected sections will be handled internally.",name:"selectedSections",required:!1,type:{name:"FieldSelectedSections"}},onSelectedSectionsChange:{defaultValue:null,description:`Callback fired when the selected sections change.
@param newValue The new selected sections.`,name:"onSelectedSectionsChange",required:!1,type:{name:"((newValue: FieldSelectedSections) => void)"}},desktopModeMediaQuery:{defaultValue:{value:"'@media (pointer: fine)'"},description:"CSS media query when `Mobile` mode will be changed to `Desktop`.\n@example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")",name:"desktopModeMediaQuery",required:!1,type:{name:"string"}},formatDensity:{defaultValue:{value:'"dense"'},description:'Density of the format when rendered in the input.\nSetting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.',name:"formatDensity",required:!1,type:{name:"enum",value:[{value:'"dense"'},{value:'"spacious"'}]}},closeOnSelect:{defaultValue:{value:"`true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop)."},description:"If `true`, the popover or modal will close after submitting the full date.",name:"closeOnSelect",required:!1,type:{name:"boolean"}},disableOpenPicker:{defaultValue:{value:"false"},description:"If `true`, the open picker button will not be rendered (renders only the field).",name:"disableOpenPicker",required:!1,type:{name:"boolean"}},minutesStep:{defaultValue:{value:"1"},description:"Step over minutes.",name:"minutesStep",required:!1,type:{name:"number"}},minTime:{defaultValue:null,description:"Minimal selectable time.\nThe date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.",name:"minTime",required:!1,type:{name:"DateTime<boolean>"}},maxTime:{defaultValue:null,description:"Maximal selectable time.\nThe date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.",name:"maxTime",required:!1,type:{name:"DateTime<boolean>"}},ampm:{defaultValue:{value:"`utils.is12HourCycleInCurrentLocale()`"},description:"12h/24h view for hour selection clock.",name:"ampm",required:!1,type:{name:"boolean"}},shouldDisableTime:{defaultValue:null,description:`Disable specific time.
@template TDate
@param value The value to check.
@param view The clock type of the timeValue.
@returns If \`true\` the time will be disabled.`,name:"shouldDisableTime",required:!1,type:{name:"((value: DateTime<boolean>, view: TimeView) => boolean)"}},shouldDisableClock:{defaultValue:null,description:"Disable specific clock time.\n@param clockValue The value to check.\n@param view The clock type of the timeValue.\n@returns If `true` the time will be disabled.\n@deprecated Consider using `shouldDisableTime`.",name:"shouldDisableClock",required:!1,type:{name:"((clockValue: number, view: TimeView) => boolean)"}},disableIgnoringDatePartForTimeValidation:{defaultValue:{value:"false"},description:"Do not ignore date part when validating min/max time.",name:"disableIgnoringDatePartForTimeValidation",required:!1,type:{name:"boolean"}},skipDisabled:{defaultValue:{value:"false"},description:"If `true`, disabled digital clock items will not be rendered.",name:"skipDisabled",required:!1,type:{name:"boolean"}},timeSteps:{defaultValue:{value:"{ hours: 1, minutes: 5, seconds: 5 }"},description:"The time steps between two time unit options.\nFor example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.\nWhen single column time renderer is used, only `timeStep.minutes` will be used.",name:"timeSteps",required:!1,type:{name:"TimeStepOptions"}},ampmInClock:{defaultValue:{value:"true on desktop, false on mobile"},description:"Display ampm controls under the clock (instead of in the toolbar).",name:"ampmInClock",required:!1,type:{name:"boolean"}},thresholdToRenderTimeInASingleColumn:{defaultValue:{value:"24"},description:"Amount of time options below or at which the single column time renderer is used.",name:"thresholdToRenderTimeInASingleColumn",required:!1,type:{name:"number"}}}}}catch{}export{U as T};
