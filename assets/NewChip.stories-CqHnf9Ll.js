import{j as t}from"./jsx-runtime-4WDyTGeM.js";import{T as p}from"./ThemeProviderWrapper-Be5RUURM.js";import{c}from"./index-eOQoo3sK.js";import{C as d}from"./Chip-N_LeqCYs.js";import{a3 as u}from"./WarningIcon-6HpPPylF.js";import"./index-Dl6G-zuu.js";import"./EditIcon-bNkpr5Ld.js";import"./SvgIcon-76a5Fjoi.js";import"./SvgIcon-DROc5w4B.js";import"./styled-Dt2_JBRt.js";import"./LinkIcon-CKhuJxKk.js";import"./Chip-gErBvg2S.js";import"./createSvgIcon-D7FplSTg.js";import"./useForkRef-BDoLG09A.js";import"./ButtonBase-Cp5BTdG6.js";import"./useTimeout-B4b6mSVs.js";import"./TransitionGroupContext-xAci1nHd.js";import"./useIsFocusVisible-NzCoqL_q.js";const m="New",l=({className:e,label:s=m,clickable:r=!1})=>t.jsx(d,{label:s,icon:t.jsx(u,{}),clickable:r,className:c("NewChip",e)});try{l.displayName="NewChip",l.__docgenInfo={description:"",displayName:"NewChip",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"(Partial<ChipClasses> & Partial<ClassNameMap<never>>)"}},children:{defaultValue:null,description:"This prop isn't supported.\nUse the `component` prop if you need to change the children structure.",name:"children",required:!1,type:{name:"null"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"((instance: HTMLDivElement | null) => void) | RefObject<HTMLDivElement> | null"}},label:{defaultValue:{value:"'New' as const"},description:"The content of the component.",name:"label",required:!1,type:{name:"ReactNode"}},tabIndex:{defaultValue:null,description:"@ignore",name:"tabIndex",required:!1,type:{name:"number"}},color:{defaultValue:{value:"'default'"},description:`The color of the component.
It supports both default and custom theme colors, which can be added as shown in the
[palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).`,name:"color",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"secondary"'},{value:'"default"'},{value:'"error"'},{value:'"info"'},{value:'"success"'},{value:'"warning"'}]}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},selected:{defaultValue:null,description:"",name:"selected",required:!1,type:{name:"boolean"}},disabled:{defaultValue:{value:"false"},description:"If `true`, the component is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},avatar:{defaultValue:null,description:"The Avatar element to display.",name:"avatar",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},clickable:{defaultValue:{value:"false"},description:`If \`true\`, the chip will appear clickable, and will raise when pressed,
even if the onClick prop is not defined.
If \`false\`, the chip will not appear clickable, even if onClick prop is defined.
This can be used, for example,
along with the component prop to indicate an anchor Chip is clickable.
Note: this controls the UI and does not affect the onClick event.`,name:"clickable",required:!1,type:{name:"boolean"}},deleteIcon:{defaultValue:null,description:"Override the default delete icon element. Shown only if `onDelete` is set.",name:"deleteIcon",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},icon:{defaultValue:null,description:"Icon element.",name:"icon",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},onDelete:{defaultValue:null,description:`Callback fired when the delete icon is clicked.
If set, the delete icon will be shown.`,name:"onDelete",required:!1,type:{name:"((event: any) => void)"}},skipFocusWhenDisabled:{defaultValue:{value:"false"},description:"If `true`, allows the disabled chip to escape focus.\nIf `false`, allows the disabled chip to receive focus.",name:"skipFocusWhenDisabled",required:!1,type:{name:"boolean"}}}}}catch{}const _={title:"Design System/Composite Components/NewChip",component:l,decorators:[e=>t.jsx(p,{children:t.jsx(e,{})})]},a={};var n,o,i;a.parameters={...a.parameters,docs:{...(n=a.parameters)==null?void 0:n.docs,source:{originalSource:"{}",...(i=(o=a.parameters)==null?void 0:o.docs)==null?void 0:i.source}}};const j=["Default"];export{a as Default,j as __namedExportsOrder,_ as default};
