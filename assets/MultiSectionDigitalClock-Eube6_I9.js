import{j as i}from"./jsx-runtime-4WDyTGeM.js";import{c as l}from"./index-eOQoo3sK.js";import{M as n,D as o}from"./DigitalClockSectionItem-Ba4kufi2.js";/* empty css                                 */const a=({className:e,...t})=>i.jsx(n,{className:l("MultiSectionDigitalClock",e),slots:{digitalClockSectionItem:o},...t});try{a.displayName="MultiSectionDigitalClock",a.__docgenInfo={description:"",displayName:"MultiSectionDigitalClock",props:{classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<MultiSectionDigitalClockClasses>"}},components:{defaultValue:{value:"{}"},description:"Overrideable components.\n@deprecated Please use `slots`.",name:"components",required:!1,type:{name:"MultiSectionDigitalClockSlotsComponent"}},componentsProps:{defaultValue:{value:"{}"},description:"The props used for each component slot.\n@deprecated Please use `slotProps`.",name:"componentsProps",required:!1,type:{name:"MultiSectionDigitalClockSlotsComponentsProps"}},slots:{defaultValue:{value:"{}"},description:"Overrideable component slots.",name:"slots",required:!1,type:{name:"UncapitalizeObjectKeys<MultiSectionDigitalClockSlotsComponent>"}},slotProps:{defaultValue:{value:"{}"},description:"The props used for each component slot.",name:"slotProps",required:!1,type:{name:"MultiSectionDigitalClockSlotsComponentsProps"}},ampm:{defaultValue:{value:"`utils.is12HourCycleInCurrentLocale()`"},description:"12h/24h view for hour selection clock.",name:"ampm",required:!1,type:{name:"boolean"}},minTime:{defaultValue:null,description:"Minimal selectable time.\nThe date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.",name:"minTime",required:!1,type:{name:"DateTime<boolean>"}},maxTime:{defaultValue:null,description:"Maximal selectable time.\nThe date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.",name:"maxTime",required:!1,type:{name:"DateTime<boolean>"}},minutesStep:{defaultValue:{value:"1"},description:"Step over minutes.",name:"minutesStep",required:!1,type:{name:"number"}},shouldDisableTime:{defaultValue:null,description:`Disable specific time.
@template TDate
@param value The value to check.
@param view The clock type of the timeValue.
@returns If \`true\` the time will be disabled.`,name:"shouldDisableTime",required:!1,type:{name:"((value: DateTime<boolean>, view: TimeView) => boolean)"}},shouldDisableClock:{defaultValue:null,description:"Disable specific clock time.\n@param clockValue The value to check.\n@param view The clock type of the timeValue.\n@returns If `true` the time will be disabled.\n@deprecated Consider using `shouldDisableTime`.",name:"shouldDisableClock",required:!1,type:{name:"((clockValue: number, view: TimeView) => boolean)"}},disableIgnoringDatePartForTimeValidation:{defaultValue:{value:"false"},description:"Do not ignore date part when validating min/max time.",name:"disableIgnoringDatePartForTimeValidation",required:!1,type:{name:"boolean"}},disablePast:{defaultValue:{value:"false"},description:"If `true`, disable values before the current date for date components, time for time components and both for date time components.",name:"disablePast",required:!1,type:{name:"boolean"}},disableFuture:{defaultValue:{value:"false"},description:"If `true`, disable values after the current date for date components, time for time components and both for date time components.",name:"disableFuture",required:!1,type:{name:"boolean"}},timezone:{defaultValue:{value:"The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise."},description:`Choose which timezone to use for the value.
Example: "default", "system", "UTC", "America/New_York".
If you pass values from other timezones to some props, they will be converted to this timezone before being used.
@see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.`,name:"timezone",required:!1,type:{name:"string"}},timeSteps:{defaultValue:{value:"{ hours: 1, minutes: 5, seconds: 5 }"},description:"The time steps between two time unit options.\nFor example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.",name:"timeSteps",required:!1,type:{name:"TimeStepOptions"}},skipDisabled:{defaultValue:{value:"false"},description:"If `true`, disabled digital clock items will not be rendered.",name:"skipDisabled",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},value:{defaultValue:null,description:`The selected value.
Used when the component is controlled.`,name:"value",required:!1,type:{name:"DateTime<boolean> | null"}},defaultValue:{defaultValue:null,description:`The default selected value.
Used when the component is not controlled.`,name:"defaultValue",required:!1,type:{name:"DateTime<boolean> | null"}},onChange:{defaultValue:null,description:`Callback fired when the value changes.
@template TDate, TView
@param value The new value.
@param selectionState Indicates if the date selection is complete.
@param selectedView Indicates the view in which the selection has been made.`,name:"onChange",required:!1,type:{name:"((value: DateTime<boolean> | null, selectionState?: PickerSelectionState, selectedView?: TimeViewWithMeridiem) => void) | undefined"}},disabled:{defaultValue:{value:"false"},description:"If `true`, the picker views and text field are disabled.",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:{value:"false"},description:"If `true`, the picker views and text field are read-only.",name:"readOnly",required:!1,type:{name:"boolean"}},referenceDate:{defaultValue:{value:"The closest valid time using the validation props, except callbacks such as `shouldDisableTime`."},description:"The date used to generate the new value when both `value` and `defaultValue` are empty.",name:"referenceDate",required:!1,type:{name:"DateTime<boolean>"}},view:{defaultValue:null,description:"The visible view.\nUsed when the component view is controlled.\nMust be a valid option from `views` list.",name:"view",required:!1,type:{name:"enum",value:[{value:'"hours"'},{value:'"minutes"'},{value:'"seconds"'},{value:'"meridiem"'}]}},autoFocus:{defaultValue:null,description:"If `true`, the main element is focused during the first mount.\nThis main element is:\n- the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n- the `input` element if there is a field rendered.",name:"autoFocus",required:!1,type:{name:"boolean"}},onFocusedViewChange:{defaultValue:null,description:`Callback fired on focused view change.
@template TView
@param view The new view to focus or not.
@param hasFocus \`true\` if the view should be focused.`,name:"onFocusedViewChange",required:!1,type:{name:"((view: TimeViewWithMeridiem, hasFocus: boolean) => void)"}},focusedView:{defaultValue:null,description:"Controlled focused view.",name:"focusedView",required:!1,type:{name:"TimeViewWithMeridiem | null"}},onViewChange:{defaultValue:null,description:`Callback fired on view change.
@template TView
@param view The new view.`,name:"onViewChange",required:!1,type:{name:"((view: TimeViewWithMeridiem) => void)"}},openTo:{defaultValue:null,description:"The default visible view.\nUsed when the component view is not controlled.\nMust be a valid option from `views` list.",name:"openTo",required:!1,type:{name:"enum",value:[{value:'"hours"'},{value:'"minutes"'},{value:'"seconds"'},{value:'"meridiem"'}]}},views:{defaultValue:null,description:"Available views.",name:"views",required:!1,type:{name:"readonly TimeViewWithMeridiem[]"}}}}}catch{}export{a as M};
