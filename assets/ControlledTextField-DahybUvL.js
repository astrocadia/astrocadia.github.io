import{j as S}from"./jsx-runtime-4WDyTGeM.js";import{R as o}from"./index-Dl6G-zuu.js";import{T as A}from"./TextField-D7DNAK2i.js";var E=e=>e.type==="checkbox",R=e=>e instanceof Date,F=e=>e==null;const k=e=>typeof e=="object";var y=e=>!F(e)&&!Array.isArray(e)&&k(e)&&!R(e),O=e=>y(e)&&e.target?E(e.target)?e.target.checked:e.target.value:e,L=e=>e.substring(0,e.search(/\.\d+(\.|$)/))||e,H=(e,n)=>e.has(L(n)),B=e=>{const n=e.constructor&&e.constructor.prototype;return y(n)&&n.hasOwnProperty("isPrototypeOf")},M=typeof window<"u"&&typeof window.HTMLElement<"u"&&typeof document<"u";function b(e){let n;const t=Array.isArray(e);if(e instanceof Date)n=new Date(e);else if(e instanceof Set)n=new Set(e);else if(!(M&&(e instanceof Blob||e instanceof FileList))&&(t||y(e)))if(n=t?[]:{},!t&&!B(e))n=e;else for(const l in e)e.hasOwnProperty(l)&&(n[l]=b(e[l]));else return e;return n}var w=e=>Array.isArray(e)?e.filter(Boolean):[],h=e=>e===void 0,d=(e,n,t)=>{if(!n||!y(e))return t;const l=w(n.split(/[,[\].]+?/)).reduce((r,a)=>F(r)?r:r[a],e);return h(l)||l===e?h(e[n])?t:e[n]:l},V=e=>typeof e=="boolean";const T={BLUR:"blur",FOCUS_OUT:"focusout",CHANGE:"change"},_={onBlur:"onBlur",onChange:"onChange",onSubmit:"onSubmit",onTouched:"onTouched",all:"all"},U=o.createContext(null),g=()=>o.useContext(U);var j=(e,n,t,l=!0)=>{const r={defaultValues:n._defaultValues};for(const a in e)Object.defineProperty(r,a,{get:()=>{const s=a;return n._proxyFormState[s]!==_.all&&(n._proxyFormState[s]=!l||_.all),t&&(t[s]=!0),e[s]}});return r},N=e=>y(e)&&!Object.keys(e).length,W=(e,n,t,l)=>{t(e);const{name:r,...a}=e;return N(a)||Object.keys(a).length>=Object.keys(n).length||Object.keys(a).find(s=>n[s]===!l)},D=e=>Array.isArray(e)?e:[e],C=(e,n,t)=>!e||!n||e===n||D(e).some(l=>l&&(t?l===n:l.startsWith(n)||n.startsWith(l)));function P(e){const n=o.useRef(e);n.current=e,o.useEffect(()=>{const t=!e.disabled&&n.current.subject&&n.current.subject.subscribe({next:n.current.next});return()=>{t&&t.unsubscribe()}},[e.disabled])}function Y(e){const n=g(),{control:t=n.control,disabled:l,name:r,exact:a}=e||{},[s,c]=o.useState(t._formState),u=o.useRef(!0),f=o.useRef({isDirty:!1,isLoading:!1,dirtyFields:!1,touchedFields:!1,validatingFields:!1,isValidating:!1,isValid:!1,errors:!1}),i=o.useRef(r);return i.current=r,P({disabled:l,next:p=>u.current&&C(i.current,p.name,a)&&W(p,f.current,t._updateFormState)&&c({...t._formState,...p}),subject:t._subjects.state}),o.useEffect(()=>(u.current=!0,f.current.isValid&&t._updateValid(!0),()=>{u.current=!1}),[t]),j(s,t,f.current,!1)}var z=e=>typeof e=="string",G=(e,n,t,l,r)=>z(e)?d(t,e,r):Array.isArray(e)?e.map(a=>d(t,a)):t;function $(e){const n=g(),{control:t=n.control,name:l,defaultValue:r,disabled:a,exact:s}=e||{},c=o.useRef(l);c.current=l,P({disabled:a,subject:t._subjects.values,next:i=>{C(c.current,i.name,s)&&f(b(G(c.current,t._names,i.values||t._formValues,!1,r)))}});const[u,f]=o.useState(t._getWatch(l,r));return o.useEffect(()=>t._removeUnmounted()),u}var K=e=>/^\w*$/.test(e),J=e=>w(e.replace(/["|']|\]/g,"").split(/\.|\[/)),q=(e,n,t)=>{let l=-1;const r=K(n)?[n]:J(n),a=r.length,s=a-1;for(;++l<a;){const c=r[l];let u=t;if(l!==s){const f=e[c];u=y(f)||Array.isArray(f)?f:isNaN(+r[l+1])?{}:[]}e[c]=u,e=e[c]}return e};function Q(e){const n=g(),{name:t,disabled:l,control:r=n.control,shouldUnregister:a}=e,s=H(r._names.array,t),c=$({control:r,name:t,defaultValue:d(r._formValues,t,d(r._defaultValues,t,e.defaultValue)),exact:!0}),u=Y({control:r,name:t}),f=o.useRef(r.register(t,{...e.rules,value:c,...V(e.disabled)?{disabled:e.disabled}:{}}));return o.useEffect(()=>{const i=r._options.shouldUnregister||a,p=(m,I)=>{const v=d(r._fields,m);v&&(v._f.mount=I)};if(p(t,!0),i){const m=b(d(r._options.defaultValues,t));q(r._defaultValues,t,m),h(d(r._formValues,t))&&q(r._formValues,t,m)}return()=>{(s?i&&!r._state.action:i)?r.unregister(t):p(t,!1)}},[t,r,s,a]),o.useEffect(()=>{d(r._fields,t)&&r._updateDisabledField({disabled:l,fields:r._fields,name:t,value:d(r._fields,t)._f.value})},[l,t,r]),{field:{name:t,value:c,...V(l)||u.disabled?{disabled:u.disabled||l}:{},onChange:o.useCallback(i=>f.current.onChange({target:{value:O(i),name:t},type:T.CHANGE}),[t]),onBlur:o.useCallback(()=>f.current.onBlur({target:{value:d(r._formValues,t),name:t},type:T.BLUR}),[t,r]),ref:i=>{const p=d(r._fields,t);p&&i&&(p._f.ref={focus:()=>i.focus(),select:()=>i.select(),setCustomValidity:m=>i.setCustomValidity(m),reportValidity:()=>i.reportValidity()})}},formState:u,fieldState:Object.defineProperties({},{invalid:{enumerable:!0,get:()=>!!d(u.errors,t)},isDirty:{enumerable:!0,get:()=>!!d(u.dirtyFields,t)},isTouched:{enumerable:!0,get:()=>!!d(u.touchedFields,t)},isValidating:{enumerable:!0,get:()=>!!d(u.validatingFields,t)},error:{enumerable:!0,get:()=>d(u.errors,t)}})}}const x=({control:e,name:n,...t})=>{var s;const{field:{ref:l,...r},formState:{errors:a}}=Q({name:n,control:e});return S.jsx(A,{inputRef:l,...r,...t,error:!!a[n],helperText:(s=a[n])==null?void 0:s.message})};try{x.displayName="ControlledTextField",x.__docgenInfo={description:"",displayName:"ControlledTextField",props:{value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"unknown"}},select:{defaultValue:{value:"false"},description:"Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.\nIf this option is set you must pass the options of the select as children.",name:"select",required:!1,type:{name:"boolean"}},FormHelperTextProps:{defaultValue:null,description:"",name:"FormHelperTextProps",required:!1,type:{name:"FormHelperTextProps"}},InputLabelProps:{defaultValue:null,description:"",name:"InputLabelProps",required:!1,type:{name:"InputLabelProps"}},InputProps:{defaultValue:null,description:"",name:"InputProps",required:!1,type:{name:"InputProps"}},SelectProps:{defaultValue:null,description:"",name:"SelectProps",required:!1,type:{name:"SelectProps"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<TextFieldClasses>"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},children:{defaultValue:null,description:`The content of the component.
@ignore`,name:"children",required:!1,type:{name:"ReactNode"}},disabled:{defaultValue:{value:"false"},description:"If `true`, the component is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},error:{defaultValue:{value:"false"},description:"If `true`, the label is displayed in an error state.",name:"error",required:!1,type:{name:"boolean"}},fullWidth:{defaultValue:{value:"false"},description:"If `true`, the input will take up the full width of its container.",name:"fullWidth",required:!1,type:{name:"boolean"}},focused:{defaultValue:null,description:"If `true`, the component is displayed in focused state.",name:"focused",required:!1,type:{name:"boolean"}},hiddenLabel:{defaultValue:{value:"false"},description:"If `true`, the label is hidden.\nThis is used to increase density for a `FilledInput`.\nBe sure to add `aria-label` to the `input` element.",name:"hiddenLabel",required:!1,type:{name:"boolean"}},required:{defaultValue:{value:"false"},description:"If `true`, the label is displayed as required and the `input` element is required.",name:"required",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"The label content.",name:"label",required:!1,type:{name:"ReactNode"}},autoFocus:{defaultValue:{value:"false"},description:"If `true`, the `input` element is focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The id of the `input` element.\nUse this prop to make `label` and `helperText` accessible for screen readers.",name:"id",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onChange:{defaultValue:null,description:"Callback fired when the value is changed.\n@param event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).\n@param event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).\n@param event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},autoComplete:{defaultValue:null,description:`This prop helps users to fill forms faster, especially on mobile devices.
The name can be confusing, as it's more like an autofill.
You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).`,name:"autoComplete",required:!1,type:{name:"string"}},helperText:{defaultValue:null,description:"The helper text content.",name:"helperText",required:!1,type:{name:"ReactNode"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"Ref<any>"}},multiline:{defaultValue:{value:"false"},description:"If `true`, a `textarea` element is rendered instead of an input.",name:"multiline",required:!1,type:{name:"boolean"}},placeholder:{defaultValue:null,description:"The short hint displayed in the `input` before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},rows:{defaultValue:null,description:"Number of rows to display when multiline option is set to true.",name:"rows",required:!1,type:{name:"string | number"}},maxRows:{defaultValue:null,description:"Maximum number of rows to display when multiline option is set to true.",name:"maxRows",required:!1,type:{name:"string | number"}},minRows:{defaultValue:null,description:"Minimum number of rows to display when multiline option is set to true.",name:"minRows",required:!1,type:{name:"string | number"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",name:"type",required:!1,type:{name:"HTMLInputTypeAttribute"}},orientation:{defaultValue:null,description:"",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},rules:{defaultValue:null,description:"",name:"rules",required:!1,type:{name:'Omit<RegisterOptions<T, Path<T>>, "disabled" | "valueAsNumber" | "valueAsDate" | "setValueAs">'}},shouldUnregister:{defaultValue:null,description:"",name:"shouldUnregister",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"any"}},control:{defaultValue:null,description:"",name:"control",required:!1,type:{name:"Control<T>"}}}}}catch{}
