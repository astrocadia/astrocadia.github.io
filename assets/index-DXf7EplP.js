import"./ListItemText-CDFTHr1G.js";try{ListItemText.displayName="ListItemText",ListItemText.__docgenInfo={description:"",displayName:"ListItemText",props:{children:{defaultValue:null,description:"Alias for the `primary` prop.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<ListItemTextClasses>"}},disableTypography:{defaultValue:{value:"false"},description:"If `true`, the children won't be wrapped by a Typography component.\nThis can be useful to render an alternative Typography variant by wrapping\nthe `children` (or `primary`) text, and optional `secondary` text\nwith the Typography component.",name:"disableTypography",required:!1,type:{name:"boolean"}},inset:{defaultValue:{value:"false"},description:"If `true`, the children are indented.\nThis should be used if there is no left avatar or left icon.",name:"inset",required:!1,type:{name:"boolean"}},primary:{defaultValue:null,description:"The main content element.",name:"primary",required:!1,type:{name:"ReactNode"}},primaryTypographyProps:{defaultValue:null,description:"These props will be forwarded to the primary typography component\n(as long as disableTypography is not `true`).",name:"primaryTypographyProps",required:!1,type:{name:'TypographyProps<"span", { component?: "span"; }>'}},secondary:{defaultValue:null,description:"The secondary content element.",name:"secondary",required:!1,type:{name:"ReactNode"}},secondaryTypographyProps:{defaultValue:null,description:"These props will be forwarded to the secondary typography component\n(as long as disableTypography is not `true`).",name:"secondaryTypographyProps",required:!1,type:{name:'TypographyProps<"p", { component?: "p"; }>'}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}}}}}catch{}
