definitions:
  images:
    - image_node_18:
        image: &image-node-18
          name: us-central1-docker.pkg.dev/gumband-devops/main/devops/node-18:latest
          username: _json_key
          password: '$PIPE_DOCKER_REPO_READER_KEY'
          run-as-user: 1000
    - image_apline_helm:
        image: &image-alpine-helm
          name: us-central1-docker.pkg.dev/gumband-devops/gumband/devops/helm-build:0.0.2
          username: _json_key
          password: '$PIPE_DOCKER_REPO_READER_KEY'
          run-as-user: 1000
    - vcluster:
        image: &vcluster-image
          name: us-central1-docker.pkg.dev/gumband-devops/main/devops/vcluster:latest
          username: _json_key
          password: "$PIPE_DOCKER_REPO_READER_KEY"
          run-as-user: 1000
  steps:
    - step: &push-dev-image
        name: Push image with build number to container registry.
        image: *image-node-18
        size: 2x
        services:
          - docker
        script:
          - echo "${PIPE_GUMBAND_SA_KEY}" | base64 -d > "${PIPE_GUMBAND_SA_KEY_FILE}"
          - gcloud auth activate-service-account --key-file "${PIPE_GUMBAND_SA_KEY_FILE}"
          - set -x
          - export issue_key=$(echo $BITBUCKET_BRANCH | grep -ioE 'GUM-[0-9]+' | head -n 1)
          - CURR_VERSION=$(node -p "require('./package.json').version")-${BITBUCKET_BUILD_NUMBER} && echo $CURR_VERSION
          - echo "DEPLOY_VERSION=$CURR_VERSION" > artifactVariables.env
          - IMAGE_TAG="${GLOBAL_GUMBAND_DOCKER_REPO}/${PIPE_DOCKER_REPO_PATH}/${PIPE_SERVICE_NAME}:${CURR_VERSION}" && echo $IMAGE_TAG
          - GUM_TAG="${GLOBAL_GUMBAND_DOCKER_REPO}/${PIPE_DOCKER_REPO_PATH}/${PIPE_SERVICE_NAME}:${issue_key,,}-${BITBUCKET_BUILD_NUMBER}" && echo $GUM_TAG
          - BRANCH="$(git branch --show-current)" && echo $BRANCH
          - COMMIT_AUTHOR="$(git log --format="%an <%ae>" -n 1 HEAD)" && echo $COMMIT_AUTHOR
          - COMMIT_HASH="$(git rev-parse HEAD)" && echo $COMMIT_HASH
          - COMMIT_MSG="$(git log --format=%B -n 1 HEAD | head -n 1)" && echo $COMMIT_MSG
          - CREATED="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" && echo $CREATED
          - CREATED_USER_FRIENDLY="$(TZ=":America/New_York" date +"%Y-%m-%d %I:%M:%S %p %Z")"&& echo $CREATED_USER_FRIENDLY
          # Build out build-info.txt 
          - echo "com.gumband.image.build.number=${BITBUCKET_BUILD_NUMBER}" >> build-info.txt
            echo "com.gumband.image.build.url=https://bitbucket.org/deeplocal/${BITBUCKET_REPO_SLUG}/pipelines/results/${BITBUCKET_BUILD_NUMBER}" >> build-info.txt
            echo "com.gumband.image.created=$CREATED" >> build-info.txt
            echo "com.gumband.image.created.user_friendly=$CREATED_USER_FRIENDLY" >> build-info.txt
            echo "com.gumband.image.vcs.branch=$BRANCH" >> build-info.txt
            echo "com.gumband.image.vcs.commit=$COMMIT_HASH" >> build-info.txt
            echo "com.gumband.image.vcs.commit.author=$COMMIT_AUTHOR" >> build-info.txt
            echo "com.gumband.image.vcs.commit.msg="$COMMIT_MSG" >> build-info.txt
            echo "com.gumband.image.vcs.commit.url=https://bitbucket.org/deeplocal/${BITBUCKET_REPO_SLUG}/commits/$COMMIT_HASH" >> build-info.txt
            echo "com.gumband.image.vcs.source=https://bitbucket.org/deeplocal/${BITBUCKET_REPO_SLUG}" >> build-info.txt
            echo "com.gumband.image.version=$CURR_VERSION >> build-info.txt
          - >-
            DOCKER_CMD="docker build --no-cache 
            --tag $IMAGE_TAG"
          - |
            if [[ ${issue_key,,} == *"gum"* ]]; then
              DOCKER_CMD+=" --tag $GUM_TAG"
            fi
          - >-
            DOCKER_CMD+="
            --build-arg \"BRANCH=$BRANCH\" 
            --build-arg \"BUILD_NUM=$BITBUCKET_BUILD_NUMBER\" 
            --build-arg \"COMMIT_AUTHOR=$COMMIT_AUTHOR\" 
            --build-arg \"COMMIT_HASH=$COMMIT_HASH\" 
            --build-arg \"COMMIT_MSG=$COMMIT_MSG\" 
            --build-arg \"CREATED=$CREATED\" 
            --build-arg \"SRC_REPO=$SRC_REPO\" 
            --build-arg \"VERSION=$VERSION\"
            --build-arg \"BUILD_ENV=ci\" .
            "
          - eval $DOCKER_CMD
          - set +x && docker login -u _json_key -p "$(cat "$PIPE_GUMBAND_SA_KEY_FILE")" "${GLOBAL_GUMBAND_DOCKER_REPO}/${PIPE_DOCKER_REPO_PATH}" && set -x
          - docker push $IMAGE_TAG
          - |
            if [[ ${issue_key,,} == *"gum"* ]]; then
              docker push "$GUM_TAG"
            fi
        artifacts:
          - artifactVariables.env
  
    - step: &push-storybook-image
        name: Push storybook image with build number to container registry.
        image: *image-node-18
        size: 2x
        services:
          - docker
        script:
          - echo "${PIPE_GUMBAND_SA_KEY}" | base64 -d > "${PIPE_GUMBAND_SA_KEY_FILE}"
          - gcloud auth activate-service-account --key-file "${PIPE_GUMBAND_SA_KEY_FILE}"
          - set -x
          - export issue_key=$(echo $BITBUCKET_BRANCH | grep -ioE 'GUM-[0-9]+' | head -n 1)
          - CURR_VERSION=$(node -p "require('./package.json').version")-${BITBUCKET_BUILD_NUMBER} && echo $CURR_VERSION
          - echo "DEPLOY_VERSION=$CURR_VERSION" > artifactVariables.env
          - IMAGE_TAG="${GLOBAL_GUMBAND_DOCKER_REPO}/${PIPE_DOCKER_REPO_PATH}/${PIPE_STORYBOOK_SERVICE_NAME}:${CURR_VERSION}" && echo $IMAGE_TAG
          - GUM_TAG="${GLOBAL_GUMBAND_DOCKER_REPO}/${PIPE_DOCKER_REPO_PATH}/${PIPE_STORYBOOK_SERVICE_NAME}:${issue_key,,}-${BITBUCKET_BUILD_NUMBER}" && echo $GUM_TAG 
          - LATEST_TAG="${GLOBAL_GUMBAND_DOCKER_REPO}/${PIPE_DOCKER_REPO_PATH}/${PIPE_STORYBOOK_SERVICE_NAME}:latest" && echo $LATEST_TAG
          - BRANCH="$(git branch --show-current)" && echo $BRANCH
          - COMMIT_AUTHOR="$(git log --format="%an <%ae>" -n 1 HEAD)" && echo $COMMIT_AUTHOR
          - COMMIT_HASH="$(git rev-parse HEAD)" && echo $COMMIT_HASH
          - COMMIT_MSG="$(git log --format=%B -n 1 HEAD | head -n 1)" && echo $COMMIT_MSG
          - CREATED="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" && echo $CREATED
          - CREATED_USER_FRIENDLY="$(TZ=":America/New_York" date +"%Y-%m-%d %I:%M:%S %p %Z")"&& echo $CREATED_USER_FRIENDLY
          # Build out build-info.txt 
          - echo "com.gumband.image.build.number=${BITBUCKET_BUILD_NUMBER}" >> build-info.txt
            echo "com.gumband.image.build.url=https://bitbucket.org/deeplocal/${BITBUCKET_REPO_SLUG}/pipelines/results/${BITBUCKET_BUILD_NUMBER}" >> build-info.txt
            echo "com.gumband.image.created=$CREATED" >> build-info.txt
            echo "com.gumband.image.created.user_friendly=$CREATED_USER_FRIENDLY" >> build-info.txt
            echo "com.gumband.image.vcs.branch=$BRANCH" >> build-info.txt
            echo "com.gumband.image.vcs.commit=$COMMIT_HASH" >> build-info.txt
            echo "com.gumband.image.vcs.commit.author=$COMMIT_AUTHOR" >> build-info.txt
            echo "com.gumband.image.vcs.commit.msg="$COMMIT_MSG" >> build-info.txt
            echo "com.gumband.image.vcs.commit.url=https://bitbucket.org/deeplocal/${BITBUCKET_REPO_SLUG}/commits/$COMMIT_HASH" >> build-info.txt
            echo "com.gumband.image.vcs.source=https://bitbucket.org/deeplocal/${BITBUCKET_REPO_SLUG}" >> build-info.txt
            echo "com.gumband.image.version=$CURR_VERSION >> build-info.txt
          - >-
            DOCKER_CMD="docker build --no-cache 
            --tag $IMAGE_TAG
            --tag $LATEST_TAG"
          - |
            if [[ ${issue_key,,} == *"gum"* ]]; then
              DOCKER_CMD+=" --tag $GUM_TAG"
            fi
          - >-
            DOCKER_CMD+="
            -f Dockerfile-storybook
            --build-arg \"BRANCH=$BRANCH\" 
            --build-arg \"BUILD_NUM=$BITBUCKET_BUILD_NUMBER\" 
            --build-arg \"COMMIT_AUTHOR=$COMMIT_AUTHOR\" 
            --build-arg \"COMMIT_HASH=$COMMIT_HASH\" 
            --build-arg \"COMMIT_MSG=$COMMIT_MSG\" 
            --build-arg \"CREATED=$CREATED\" 
            --build-arg \"SRC_REPO=$SRC_REPO\" 
            --build-arg \"VERSION=$VERSION\"
            --build-arg \"BUILD_ENV=ci\" .
            "
          - eval $DOCKER_CMD
          - set +x && docker login -u _json_key -p "$(cat "$PIPE_GUMBAND_SA_KEY_FILE")" "${GLOBAL_GUMBAND_DOCKER_REPO}/${PIPE_DOCKER_REPO_PATH}" && set -x
          - docker push $IMAGE_TAG
          - docker push $LATEST_TAG
          - |
            if [[ ${issue_key,,} == *"gum"* ]]; then
              docker push "$GUM_TAG"
            fi
        artifacts:
          - artifactVariables.env
  
    - step: &deployDev
        name: Deploy to dev
        image: *image-alpine-helm
        script:
          - export DEPLOY_VERSION=$(cat artifactVariables.env | grep DEPLOY_VERSION | cut -d '=' -f 2)
          - git clone https://x-token-auth:${HELM_REPOSITORY_ACCESS_TOKEN}@bitbucket.org/deeplocal/gb-helm-charts.git
          - cd gb-helm-charts
          - git config user.email "${HELM_BOT_ID}@bots.bitbucket.org"
          - git config user.name "Bitbucket Pipeline | FRONTEND-v2"
          - yq -i ".image.tag = \"$DEPLOY_VERSION\"" frontend-v2/env/dev.yaml
          - git add frontend-v2/env/dev.yaml
          - git commit -m "Updating FRONTEND-v2/DEV to $DEPLOY_VERSION"
          - git push
        artifacts:
          - artifactVariables.env

    - step: &deployStag
        name: Deploy to staging
        image: *image-alpine-helm
        script:
          - export DEPLOY_VERSION=$(cat artifactVariables.env | grep DEPLOY_VERSION | cut -d '=' -f 2)
          - git clone https://x-token-auth:${HELM_REPOSITORY_ACCESS_TOKEN}@bitbucket.org/deeplocal/gb-helm-charts.git
          - cd gb-helm-charts
          - git config user.email "${HELM_BOT_ID}@bots.bitbucket.org"
          - git config user.name "Bitbucket Pipeline | FRONTEND-v2"
          - yq -i ".image.tag = \"$DEPLOY_VERSION\"" frontend-v2/env/stag.yaml
          - git add frontend-v2/env/stag.yaml
          - git commit -m "Updating FRONTEND-v2/STAG to $DEPLOY_VERSION"
          - git push
        artifacts:
          - artifactVariables.env

    - step: &uploadStorybook
        name: Upload Storybook to Gcloud App Engine
        image: *image-node-18
        script:
          - echo "${PIPE_APP_ENGINE_SA_KEY}" | base64 -d > "${PIPE_GUMBAND_SA_KEY_FILE}"
          - gcloud auth activate-service-account --key-file "${PIPE_GUMBAND_SA_KEY_FILE}"
          - gcloud config set project gumband-v2
          - set -x
          - npm install
          - npx storybook build
          - gcloud app deploy storybook.yaml --quiet --stop-previous-version
          # Get Non Active Version of the App Engine deployment. (Having unused version eat up expense)
          - ZERO_TRAFFIC_VERSIONS=$(gcloud app versions list --project gumband-v2 --filter="traffic_split=0.00" --format="value(version.id)")
          # Delete Non active Versions
          - |
            for version in $ZERO_TRAFFIC_VERSIONS; do
              echo "Deleting version: $version"
              gcloud app versions delete $version --project gumband-v2 -q
            done
        artifacts:
          - artifactVariables.env

    - step: &release-build
        name: Create new release version & push release image if all tests pass
        image: *image-node-18
        services:
          - docker
        script:
          - echo "${PIPE_GUMBAND_SA_KEY}" | base64 -d > "${PIPE_GUMBAND_SA_KEY_FILE}"
          - gcloud auth activate-service-account --key-file "${PIPE_GUMBAND_SA_KEY_FILE}"
          - git config --global --add safe.directory /opt/atlassian/pipelines/agent/build
          #- npm run setup:ci
          # The following is the broken down version of gumband-release-build.sh in the gumops-build-scripts-lib repo
          - if [ "$BITBUCKET_BRANCH" != "main" ]; then exit 1; fi
          - echo "On the main branch, proceeding with pipeline steps."
          - CURR_VERSION=$(node -p "require('./package.json').version")
          # Turning off test for now until they are setup.
          #- npm run setup:ci
          #- npm run test
          #- npm run test:integration:ci
          - npm --no-git-tag-version version patch
          #- npm run setup:ci
          #- npm run test
          #- npm run test:integration:ci
          - NEW_VERSION=$(node -p "require('./package.json').version")
          - echo "DEPLOY_VERSION=$NEW_VERSION" > artifactVariables.env
          - git add package.json package-lock.json
          - git commit -m "Release PATCH version $NEW_VERSION [skip ci]"
          - git push
          - git tag -am "Release PATCH version $NEW_VERSION" "$NEW_VERSION"
          - git push --tags
          # build-push-image.sh breakdown:          
          - CURR_VERSION=$(node -p "require('./package.json').version") && echo $CURR_VERSION
          - IMAGE_TAG="${GLOBAL_GUMBAND_DOCKER_REPO}/${PIPE_DOCKER_REPO_PATH}/${PIPE_SERVICE_NAME}:${CURR_VERSION}" && echo $IMAGE_TAG
          - PROD_TAG="${GLOBAL_GUMBAND_DOCKER_REPO}/${PIPE_DOCKER_REPO_PATH}/${PIPE_SERVICE_NAME}:prod" && echo $PROD_TAG
          - BRANCH="$(git branch --show-current)" && echo $BRANCH
          - COMMIT_AUTHOR="$(git log --format="%an <%ae>" -n 1 HEAD)" && echo $COMMIT_AUTHOR
          - COMMIT_HASH="$(git rev-parse HEAD)" && echo $COMMIT_HASH
          - COMMIT_MSG="$(git log --format=%B -n 1 HEAD | head -n 1)" && echo $COMMIT_MSG
          - CREATED="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" && echo $CREATED
          - CREATED_USER_FRIENDLY="$(TZ=":America/New_York" date +"%Y-%m-%d %I:%M:%S %p %Z")"&& echo $CREATED_USER_FRIENDLY
          # Build out build-info.txt 
          - echo "com.gumband.image.build.number=${BITBUCKET_BUILD_NUMBER}" >> build-info.txt
            echo "com.gumband.image.build.url=https://bitbucket.org/deeplocal/${BITBUCKET_REPO_SLUG}/pipelines/results/${BITBUCKET_BUILD_NUMBER}" >> build-info.txt
            echo "com.gumband.image.created=$CREATED" >> build-info.txt
            echo "com.gumband.image.created.user_friendly=$CREATED_USER_FRIENDLY" >> build-info.txt
            echo "com.gumband.image.vcs.branch=$BRANCH" >> build-info.txt
            echo "com.gumband.image.vcs.commit=$COMMIT_HASH" >> build-info.txt
            echo "com.gumband.image.vcs.commit.author=$COMMIT_AUTHOR" >> build-info.txt
            echo "com.gumband.image.vcs.commit.msg="$COMMIT_MSG" >> build-info.txt
            echo "com.gumband.image.vcs.commit.url=https://bitbucket.org/deeplocal/${BITBUCKET_REPO_SLUG}/commits/$COMMIT_HASH" >> build-info.txt
            echo "com.gumband.image.vcs.source=https://bitbucket.org/deeplocal/${BITBUCKET_REPO_SLUG}" >> build-info.txt
            echo "com.gumband.image.version=$CURR_VERSION >> build-info.txt
          # Build out docker command with all build-args needed in the docker file
          - >-
            DOCKER_CMD="docker build --no-cache 
            --tag $IMAGE_TAG 
            --tag $PROD_TAG 
            --build-arg \"BRANCH=$BRANCH\" 
            --build-arg \"BUILD_NUM=$BITBUCKET_BUILD_NUMBER\" 
            --build-arg \"COMMIT_AUTHOR=$COMMIT_AUTHOR\" 
            --build-arg \"COMMIT_HASH=$COMMIT_HASH\" 
            --build-arg \"COMMIT_MSG=$COMMIT_MSG\" 
            --build-arg \"CREATED=$CREATED\" 
            --build-arg \"SRC_REPO=$SRC_REPO\" 
            --build-arg \"VERSION=$VERSION\"
            --build-arg \"BUILD_ENV=ci\" .
            "
          - eval $DOCKER_CMD
          - set +x && docker login -u _json_key -p "$(cat "$PIPE_GUMBAND_SA_KEY_FILE")" "${GLOBAL_GUMBAND_DOCKER_REPO}/${PIPE_DOCKER_REPO_PATH}" && set -x
          - docker push "$IMAGE_TAG"
          - docker push "$PROD_TAG"
        artifacts:
          - artifactVariables.env

    - step: &prToProd
        name: Create PR for Prod
        image: *image-node-18
        script:
          # Store new version in DEPLOY_VERSION
          - export DEPLOY_VERSION=$(cat artifactVariables.env | grep DEPLOY_VERSION | cut -d '=' -f 2)
          - echo "Deploying $DEPLOY_VERSION"
          # Get the JIRA Issue ID From the Branch Name
          - git config --global --add safe.directory /opt/atlassian/pipelines/agent/build
          - export issue_key=$(git --no-pager show -s --format=%s $BITBUCKET_COMMIT | grep -ioE 'GUM-[0-9]+' | head -n 1)
          # Get the account id of the pipeline user
          - export BITBUCKET_TRIGGERER_ACCOUNT_ID=$(curl -X GET -g "https://api.bitbucket.org/2.0/users/${BITBUCKET_STEP_TRIGGERER_UUID}" | jq --raw-output '.account_id')
          # Pull down the GB Helm Chart Repo and set the bot for git email/username
          - git clone https://x-token-auth:${HELM_REPOSITORY_ACCESS_TOKEN}@bitbucket.org/deeplocal/gb-helm-charts.git
          - cd gb-helm-charts
          - git config user.email "${HELM_BOT_ID}@bots.bitbucket.org"
          - git config user.name "Bitbucket Pipeline | ${PIPE_SERVICE_NAME}"
          # Get old image tag for linking
          - export prodVersion=$(yq e '.image.tag' $PIPE_SERVICE_NAME/env/prod.yaml)
          # Use yq to update the app_version and image tag to mirror the Deploy Version from artifact registry
          - yq -i ".image.tag = \"$DEPLOY_VERSION\"" $PIPE_SERVICE_NAME/env/prod.yaml
          # Create a branch for the changes to take place
          - git checkout -b Update_$PIPE_SERVICE_NAME_$DEPLOY_VERSION
          # Add and commit the update to the gb helm repo
          - git add $PIPE_SERVICE_NAME/env/prod.yaml
          - git commit -m "Updating $PIPE_SERVICE_NAME/PROD to $DEPLOY_VERSION"
          - git push --set-upstream origin Update_$PIPE_SERVICE_NAME_$DEPLOY_VERSION
          # Create a PR
          - >-
            export PR_RESPONSE=$(curl https://api.bitbucket.org/2.0/repositories/deeplocal/gb-helm-charts/pullrequests 
            --request POST 
            --header 'Content-Type: application/json' 
            --header "Authorization: Bearer $HELM_REPOSITORY_ACCESS_TOKEN" 
            --header 'Accept: application/json' 
            --data "{
                \"title\": \"Update ${PIPE_SERVICE_NAME} from $prodVersion to $DEPLOY_VERSION\",
                \"source\": {
                    \"branch\": {
                        \"name\": \"Update_$PIPE_SERVICE_NAME_$DEPLOY_VERSION\"
                    }
                },
                \"destination\": {
                    \"branch\": {
                        \"name\": \"main\"
                    }
                }, 
                \"description\": \"Linked JIRA issue: [${issue_key}](https://deeplocal.atlassian.net/browse/${issue_key}) \n\n Commit History from ${prodVersion} to ${DEPLOY_VERSION}: [Compare](https://bitbucket.org/deeplocal/${BITBUCKET_REPO_SLUG}/branches/compare/${DEPLOY_VERSION}%0D${prodVersion})\",
                \"reviewers\": [
                    {
                        \"uuid\": \"{0035bfd7-dc3d-44b2-8d76-6d0bf319fd54}\"
                    },
                    {
                        \"uuid\": \"{13b33dbe-10a5-42a0-8cec-42b8d9c6c1a5}\"
                    },
                    {
                        \"uuid\": \"{ad6f05f8-b2fc-4e2b-9ec2-f2d539c011a4}\"
                    }
                ]
            }")
          # Get the ID of the PR
          - echo $PR_RESPONSE
          - export PR_ID=$(echo $PR_RESPONSE | jq '.id')
          # Create a comment tagging the pipeline trigger user.
          - >-
            curl https://api.bitbucket.org/2.0/repositories/deeplocal/gb-helm-charts/pullrequests/$PR_ID/comments 
            --request POST 
            --header 'Content-Type: application/json' 
            --header "Authorization: Bearer $HELM_REPOSITORY_ACCESS_TOKEN" 
            --header 'Accept: application/json' 
            --data "{
                \"content\": {
                    \"raw\": \"This PR was triggered by @{$BITBUCKET_TRIGGERER_ACCOUNT_ID}\"
                }
            }"
        artifacts:
          - artifactVariables.env
    
    - step: &vcluster-deploy
        name: Deploy preview environment
        image: *vcluster-image
        script:
          - echo "${PIPE_GUMBAND_SA_KEY}" | base64 -d > "${PIPE_GUMBAND_SA_KEY_FILE}"
          - gcloud auth activate-service-account --key-file "${PIPE_GUMBAND_SA_KEY_FILE}"
          - gcloud container clusters get-credentials vcluster-dev --zone us-central1-a --project gumband-v2
          - export issue_key=$(echo $BITBUCKET_BRANCH | grep -ioE 'GUM-[0-9]+' | head -n 1)
          - echo "ISSUE KEY $issue_key"
          - git clone https://x-token-auth:${DEVOPS_SCRIPTS_ACCESS_TOKEN}@bitbucket.org/deeplocal/devops-script-library.git
          - cd devops-script-library/vcluster/
          - mkdir secrets/
          - echo "${SOPS_AGE}" | base64 -d > "secrets/sops-age.yaml"
          - echo "${SA_PULL_CREDS}" | base64 -d > "secrets/sa-pull-creds.yaml"
          - echo "${GUMBAND_FLUX}" | base64 -d > "gumband-flux"
          - echo "${FLUX_REPOSITORY_ACCESS_TOKEN}" > "flux-access.txt"
          - bash create-vcluster.sh $issue_key $PIPE_SERVICE_NAME $BITBUCKET_BUILD_NUMBER
        artifacts:
          - artifactVariables.env

    - step: &vcluster-update
        name: Update a preview environment
        image: *vcluster-image
        script:
          - echo "${PIPE_GUMBAND_SA_KEY}" | base64 -d > "${PIPE_GUMBAND_SA_KEY_FILE}"
          - gcloud auth activate-service-account --key-file "${PIPE_GUMBAND_SA_KEY_FILE}"
          - gcloud container clusters get-credentials vcluster-dev --zone us-central1-a --project gumband-v2
          - git config --global --add safe.directory /opt/atlassian/pipelines/agent/build
          # We need to get the GUM-XXX number from the commit message from the source branch
          - export issue_key=$(echo $BITBUCKET_BRANCH | grep -ioE 'GUM-[0-9]+' | head -n 1)
          - echo "ISSUE KEY $issue_key"
          - git clone https://x-token-auth:${DEVOPS_SCRIPTS_ACCESS_TOKEN}@bitbucket.org/deeplocal/devops-script-library.git
          - cd devops-script-library/vcluster/
          - echo "${FLUX_REPOSITORY_ACCESS_TOKEN}" > "flux-access.txt"
          - bash update-vcluster.sh $issue_key $PIPE_SERVICE_NAME $BITBUCKET_BUILD_NUMBER
        artifacts:
          - artifactVariables.env
    - step: &vcluster-delete
        name: Delete preview environment
        image: *vcluster-image
        script:
          - echo "${PIPE_GUMBAND_SA_KEY}" | base64 -d > "${PIPE_GUMBAND_SA_KEY_FILE}"
          - gcloud auth activate-service-account --key-file "${PIPE_GUMBAND_SA_KEY_FILE}"
          - gcloud container clusters get-credentials vcluster-dev --zone us-central1-a --project gumband-v2
          - git config --global --add safe.directory /opt/atlassian/pipelines/agent/build
          # We need to get the GUM-XXX number from the commit message from the source branch
          - export issue_key=$(git --no-pager show -s --format=%s $BITBUCKET_COMMIT | grep -ioE 'GUM-[0-9]+' | head -n 1)
          - echo "ISSUE KEY $issue_key"
          - git clone https://x-token-auth:${DEVOPS_SCRIPTS_ACCESS_TOKEN}@bitbucket.org/deeplocal/devops-script-library.git
          - cd devops-script-library/vcluster/
          - echo "${FLUX_REPOSITORY_ACCESS_TOKEN}" > "flux-access.txt"
          - bash delete-vcluster.sh $issue_key

        artifacts:
          - artifactVariables.env
options:
  # doubling memory size of the entire pipe
  size: 2x
  docker: true
pipelines:
  default:
    - step: *push-dev-image
    - step: *push-storybook-image
    - step: *vcluster-update
    - step:
        <<: *uploadStorybook
        trigger: manual
    - step:
        <<: *deployDev
        trigger: manual

  branches:
    main:
      - step: *release-build
      - step: *uploadStorybook
      - step: *deployStag
      - step: *vcluster-delete
      - step:
          <<: *prToProd
          trigger: manual

  pull-requests:
    '**':
      - step: *push-dev-image
      - step: *push-storybook-image
      - step: *vcluster-deploy
      - step: 
          <<: *uploadStorybook
          trigger: manual
      - step: 
          <<: *deployDev
          trigger: manual
definitions:
  services:
    docker:
      memory: 4096      
      
#    - parallel:
#        - step:
#            <<: *coding-standards
#        - step:
#            <<: *unit-tests

# - step: &coding-standards
#     name: Dependency check, audit, and linting
#     image: *image-node-18
#     script:
#       - depcheck
#       - npm audit --audit-level=high
#       - npm run lint # When will we turn these back on?

# - step: &unit-tests
#     name: Build and run automated tests
#     image: *image-node-18
#     script:
#       - echo "${PIPE_GUMBAND_SA_KEY}" | base64 -d > "${PIPE_GUMBAND_SA_KEY_FILE}"
#       - gcloud auth activate-service-account --key-file "${PIPE_GUMBAND_SA_KEY_FILE}"
#       - npx google-artifactregistry-auth --repo-config=./.npmrc --credential-config=$HOME/.npmrc
#       - npm run test

# - step: &test-dev-build
#     name: Build dev image
#     image: *image-node-18
#     script:
#       # PIPE_GUMBAND_SA_KEY stored in Bitwarden. Converted to base64, and saved as a repository variable. This first line 
#       # pulls that key, decrypts it, and saves into /tmp/gumband-sa.json as defined in the repository variables.
#       - echo "${PIPE_GUMBAND_SA_KEY}" | base64 -d > "${PIPE_GUMBAND_SA_KEY_FILE}"
#       - gcloud auth activate-service-account --key-file "${PIPE_GUMBAND_SA_KEY_FILE}"
#       - git config --global --add safe.directory /opt/atlassian/pipelines/agent/build
#       - npm ci
#       - npm run build

## TODO
# [x] build & push storybook
# [] add in unit testing
# [] add in code standards
# [] add build metadata
# [] tag repo with relevant image info
# [] parallelize dev & storybook build and push
# [] create plaintext version file
